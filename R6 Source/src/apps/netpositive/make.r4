## BeOS Generic Makefile v2.0 ##

## Fill in this file to specify the project being created, and the referenced
## makefile-engine will do all of the hard work for you.  This handles both
## Intel and PowerPC builds of the BeOS.

#	determine wheather running on x86 or ppc
MACHINE=$(shell uname -m)
ifeq ($(MACHINE), BePC)
	CPU = x86
else
	CPU = ppc
endif

## Application Specific Settings ---------------------------------------------

APP_VERSION 	:= -app 3 0 0 d3 -short 3.0d3 -long "3.0d3"`echo -n -e '\302\251'`"1991-1999 Be Incorporated"
EAY 			 = ./SSLREF_300/SSLeay-0.9.0b
SSLLINKOBJS		 = $(EAY)/libssl.a $(EAY)/libcrypto.a $(EAY)/libBSAFEglue.a SSLREF_300/libbsafe.a SSLREF_300/obj/tstdlib.o $(EAY)/libcrypto.a
JAVASCRIPTOBJS	 = javascript/seisdk/libs/beos/libserte40.a

# specify the name of the binary
NAME= NetPositive

# specify the type of binary
#	APP:	Application
#	SHARED:	Shared library or add-on
#	STATIC:	Static library archive
#	DRIVER: Kernel Driver
TYPE= APP

#	specify the source files to use
#	full paths or paths relative to the makefile can be included
# 	all files, regardless of directory, will have their object
#	files created in the common object directory.
#	Note that this means this makefile will not work correctly
#	if two source files with the same name (source.c or source.cpp)
#	are included from different directories.  Also note that spaces
#	in folder names do not work well with this makefile.
SRCS= \
	AdFilter.cpp \
	AnchorGlyph.cpp \
	BasicAuth.cpp \
	BeDrawPort.cpp \
	BeInput.cpp	\
	BeSSL.cpp \
	BitmapButton.cpp \
	Bookmarks.cpp \
	Builder.cpp	\
	Cache.cpp \
	CGIF.cpp \
	Cookie.cpp \
	DownloadWindow.cpp \
	DrawPort.cpp \
	FileSystemHTML.cpp \
	FindWindow.cpp \
	FolderWatcher.cpp \
	FontSubstitution.cpp \
	Form.cpp \
	Glyph.cpp \
	HashTable.cpp \
	HistoryMenu.cpp \
	HTMLDoc.cpp \
	HTMLTags.cpp \
	HTMLView.cpp \
	HTMLWindow.cpp \
	icon_data.cpp \
	Image.cpp \
	ImageGlyph.cpp \
	InputGlyph.cpp \
	JavaGlyph.cpp \
	JPEG.cpp \
	JPEGDCT.cpp \
	JPEGDraw.cpp \
	JPEGScan.cpp \
	JSInterface.cpp \
	LocationWindow.cpp \
	MessageWindow.cpp \
	MIMEType.cpp \
	NPApp.cpp \
	ObjectGlyph.cpp \
	PageGlyph.cpp \
	Parser.cpp \
	PrefsWindow.cpp \
	ProgressView.cpp \
	Protocol.cpp \
	SaveText.cpp \
	Selection.cpp \
	Store.cpp \
	Strings.cpp \
	TableGlyph.cpp \
	TextGlyph.cpp \
	UResource.cpp \
	URL.cpp \
	URLView.cpp \
	Utils.cpp \
	javascript/brwsrlib/sebrowse.cpp
		
#	specify the resource files to use
#	full path or a relative path to the resource file can be used.
RSRCS= 

#	specify additional libraries to link against
#	there are two acceptable forms of library specifications
#	-	if your library follows the naming pattern of:
#		libXXX.so or libXXX.a you can simply specify XXX
#		library: libbe.so entry: be
#		
#	- 	if your library does not follow the standard library
#		naming scheme you need to specify the path to the library
#		and it's name
#		library: my_lib.a entry: my_lib.a or path/my_lib.a
ifeq ($(CPU), x86)
LIBS= \
	/boot/develop/lib/x86/libbe.so \
	/boot/develop/lib/x86/libnet.so \
	/boot/develop/lib/x86/libtracker.so \
	/boot/develop/lib/x86/libtextencoding.so \
	/boot/develop/lib/x86/libmidi.so \
	/boot/develop/lib/x86/libmail.so \
	/boot/develop/lib/x86/libtranslation.so \
	/boot/develop/lib/x86/libgame.so
else
LIBS=\
	/boot/develop/lib/ppc/libroot.so \
	/boot/develop/lib/ppc/libbe.so \
	/boot/develop/lib/ppc/libnet.so \
	/boot/develop/lib/ppc/libtracker.so \
	/boot/develop/lib/ppc/libtextencoding.so \
	/boot/develop/lib/ppc/libmidi.so \
	/boot/develop/lib/ppc/libmail.so \
	/boot/develop/lib/ppc/libtranslation.so \
	/boot/develop/lib/ppc/libgame.so
endif
		
#	specify additional paths to directories following the standard
#	libXXX.so or libXXX.a naming scheme.  You can specify full paths
#	or paths relative to the makefile.  The paths included may not
#	be recursive, so include all of the paths where libraries can
#	be found.  Directories where source files are found are
#	automatically included.
LIBPATHS= 

#	additional paths to look for system headers
#	thes use the form: #include <header>
#	source file directories are NOT auto-included here
SYSTEM_INCLUDE_PATHS = 

#	additional paths to look for local headers
#	thes use the form: #include "header"
#	source file directories are automatically included
LOCAL_INCLUDE_PATHS = \
						$(EAY)/include \
						./javascript/brwsrlib \
						./javascript/incjse \
						./javascript/srcmisc \
						./javascript/srccore \
						./javascript/srcapp \
						./javascript/srclib \
						./javascript/srclib/ecma \
						./javascript/srclib/common \
						./SSLREF_300/bsafe40/BeOSr4.pic/library/include 
#	specify the level of optimization that you desire
#	NONE, SOME, FULL
OPTIMIZE= FULL

#	specify any preprocessor symbols to be defined.  The symbols
#	will be set to a value of 1.  For example specify DEBUG if you want
#	DEBUG=1 to be set when compiling.
DEFINES= BE BSAFE ADFILTER JAVASCRIPT EXPORT R4_COMPATIBLE

#	specify special warning levels
#	if unspecified default warnings will be used
#	NONE = supress all warnings
#	ALL = enable all warnings
WARNINGS = NONE

#	specify whether image symbols will be created
#	so that stack crawls in the debugger are meaningful
#	if TRUE symbols will be created
SYMBOLS = 

#	specify debug settings
#	if TRUE will allow application to be run from
#	a source-level debugger
DEBUGGER = 

#	specify additional compiler flags for all files
COMPILER_FLAGS = 

#	specify additional linker flags
ifeq ($(CPU), ppc)
LINKER_FLAGS = -nodup  	
endif


#	set the directory where object files and binaries will be created
	OBJ_DIR		:= obj.$(CPU)

# 	specify that the binary should be created in the object directory
	TARGET		:= $(OBJ_DIR)/$(NAME)

#	specify the mimeset tool
	MIMESET		:= mimeset

#	specify the tools for adding and removing resources
	XRES		= xres


# 	platform specific settings

#	x86 Settings
ifeq ($(CPU), x86)
#	set the compiler and compiler flags
	CC		=	gcc

#	SETTING: set the CFLAGS for each binary type	
	ifeq ($(TYPE), DRIVER)
		CFLAGS	+= -no-fpic
	else
		CFLAGS +=
	endif

#	SETTING: set the proper optimization level
	ifeq ($(OPTIMIZE), FULL)
#		OPTIMIZER	= -Os -fno-exceptions -fno-pic
		OPTIMIZER	= -Os -fno-exceptions -fomit-frame-pointer -fno-pic
	else
	ifeq ($(OPTIMIZE), SOME)
		OPTIMIZER	= -O1
	else
	ifeq ($(OPTIMIZE), NONE)
		OPTIMIZER	= -O0
	else
#		OPTIMIZE not set so set to full
		OPTIMIZER	= -O3
	endif
	endif
	endif
		

	
#	SETTING: set proper debugger flags
	ifeq ($(DEBUGGER), TRUE)
		DEBUG = -g
		OPTIMIZER = -O0
	endif	
	
	CFLAGS += $(OPTIMIZER) $(DEBUG)

#	SETTING: set warning level
	ifeq ($(WARNINGS), ALL)
		CFLAGS += -Wall -Wno-multichar -Wno-ctor-dtor-privacy
	else
	ifeq ($(WARNINGS), NONE)
		CFLAGS += -w
	endif
	endif

#	set the linker and linker flags
	LD			= gcc
	LDFLAGS		+= $(DEBUG)

#	SETTING: set linker flags for each binary type
	ifeq ($(TYPE), APP)
		LDFLAGS += -Xlinker -soname=_APP_
	else
	ifeq ($(TYPE), SHARED)
		LDFLAGS += -nostart -Xlinker -soname=$(NAME)
	else
	ifeq ($(TYPE), DRIVER)
		LDFLAGS += -nostdlib /boot/develop/lib/x86/_KERNEL_
	endif 
	endif 
	endif 

	
else

#	ppc Settings
ifeq ($(CPU), ppc)
#	set the compiler and compiler flags
	CC		=	/boot/develop/mwccppc
	CFLAGS	+=	

#	SETTING: set the proper optimization level
	ifeq ($(OPTIMIZE), FULL)
		OPTIMIZER	= -O7 -Cpp_exceptions off
	else
	ifeq ($(OPTIMIZE), SOME)
		OPTIMIZER	= -O3
	else
	ifeq ($(OPTIMIZE), NONE)
		OPTIMIZER	=
	else
#		OPTIMIZE not set so set to full
		OPTIMIZER	= -O7
	endif
	endif
	endif
	
	CFLAGS += $(OPTIMIZER)

#	SETTING: set warning level
	ifeq ($(WARNINGS), ALL)
		CFLAGS += -w all
	else
	ifeq ($(WARNINGS), NONE)
#		CFLAGS += -w 0
	endif
	endif

	# clear the standard environment variable
	# now there are no standard libraries to link against
	BELIBFILES=

#	set the linker and linker flags
	LD			= mwldppc

#	SETTING: set linker flags for each binary type
	ifeq ($(TYPE), APP)
		LDFLAGS += 
	else
	ifeq ($(TYPE), SHARED)
		LDFLAGS += 	-xms 
	endif
	endif

	ifeq ($(TYPE), DRIVER)
		LDFLAGS += -nodefaults \
					-export all \
					-G \
					/boot/develop/lib/ppc/glue-noinit.a \
					/boot/develop/lib/ppc/_KERNEL_
	else
		LDFLAGS +=	-export pragma \
					-init _init_routine_ \
					-term _term_routine_ \
					/boot/develop/lib/ppc/glue-noinit.a \
					/boot/develop/lib/ppc/init_term_dyn.o \
					/boot/develop/lib/ppc/start_dyn.o 
	endif			
	
	
#	SETTING: output symbols in an xMAP file
	ifeq ($(SYMBOLS), TRUE)
		LDFLAGS += -map $(TARGET).xMAP
	endif

#	SETTING: output debugging info to a .SYM file
	ifeq ($(DEBUGGER), TRUE)
		LDFLAGS += -g -osym $(TARGET).SYM
	endif

endif
endif


# psuedo-function for converting a list of source files in SRCS variable
# to a corresponding list of object files in $(OBJ_DIR)/xxx.o
# The "function" strips off the src file suffix (.ccp or .c or whatever)
# and then strips of the directory name, leaving just the root file name.
# It then appends the .o suffix and prepends the $(OBJ_DIR)/ path
define SRCS_LIST_TO_OBJS
	$(addprefix $(OBJ_DIR)/, $(addsuffix .o, $(foreach file, $(SRCS), \
	$(basename $(notdir $(file))))))
endef

OBJS = $(SRCS_LIST_TO_OBJS)

# create a unique list of paths to our sourcefiles
SRC_PATHS += $(sort $(foreach file, $(SRCS), $(dir $(file))))

# add source paths to VPATH if not already present
VPATH :=
VPATH += $(addprefix :, $(subst  ,:, $(filter-out $($(subst, :, ,$(VPATH))), $(SRC_PATHS))))

#	SETTING: build the local and system include paths
ifeq ($(CPU), x86)
	LOC_INCLUDES = $(foreach path, $(SRC_PATHS) $(LOCAL_INCLUDE_PATHS), $(addprefix -I, $(path)))
	SYS_INCLUDES = $(foreach path, $(SYSTEM_INCLUDE_PATHS), $(addprefix -I, $(path)))
else
ifeq ($(CPU), ppc)
	LOC_INCLUDES = $(foreach path, $(SRC_PATHS) $(LOCAL_INCLUDE_PATHS), $(addprefix -I, $(path)))
	SYS_INCLUDES += -i-
	SYS_INCLUDES += $(foreach path, $(SYSTEM_INCLUDE_PATHS), $(addprefix -i , $(path)))
endif
endif

INCLUDES = $(LOC_INCLUDES) $(SYS_INCLUDES)

# SETTING: add the -L prefix to all library paths to search
LINK_PATHS = $(foreach path, $(SRC_PATHS) $(LIBPATHS), \
	$(addprefix -L, $(path)))

#	SETTING: specify the additional libraries to link against
#	if the libraries have a .so or .a prefix, or if they are _APP_ or _KERNEL_
#	simply add them to the list
LINK_LIBS += $(filter %.so %.a _APP_ _KERNEL_, $(LIBS))
#	if the libraries do not have suffixes and are not _APP_ or _KERNEL_
#	prepend -l to each name: be becomes -lbe
LINK_LIBS += $(foreach lib, $(filter-out %.so %.a _APP_ _KERNEL_, $(LIBS)), $(addprefix -l, $(lib)))

# add to the linker flags 
LDFLAGS += $(LINK_PATHS)  $(LINK_LIBS)

#	SETTING: add the defines to the compiler flags
CFLAGS += $(foreach define, $(DEFINES), $(addprefix -D, $(define)))

#	SETTING: add the additional compiler flags
CFLAGS += $(COMPILER_FLAGS)

#	SETTING: add the additional linker flags
LDFLAGS += $(LINKER_FLAGS)

#	SETTING: use the archive tools if building a static library
#	otherwise use the linker
ifeq ($(TYPE), STATIC)
	BUILD_LINE = ar -cru $(TARGET) $(OBJS)
else
	BUILD_LINE = $(LD) -o $@ $(OBJS) $(LDFLAGS) $(JAVASCRIPTOBJS) $(SSLLINKOBJS)
endif

#	create the resource instruction
	ifeq ($(RSRCS), )
		DO_RSRCS :=
	else
		DO_RSRCS := $(XRES) -o $(TARGET) $(RSRCS)
	endif


#	define the actual work to be done	
default: $(TARGET)

$(TARGET):	$(OBJ_DIR) $(OBJS) $(RSRCS)
		(cd javascript/seisdk/libs/beos && make)
		(cd SSLREF_300 && make -s)
		$(BUILD_LINE)
#		$(DO_RSRCS)
ifeq ($(CPU), x86)
		strip --discard-all $@
endif
		mwbres -o $(OBJ_DIR)/NetPositive.rsrc NetPositive.r
		xres -o $@ $(OBJ_DIR)/NetPositive.rsrc
		$(MIMESET) -f $@
		setversion $@ $(APP_VERSION)


#	rule to create the object file directory if needed
$(OBJ_DIR)::
	@[ -d $(OBJ_DIR) ] || mkdir $(OBJ_DIR) > /dev/null 2>&1

$(OBJ_DIR)/%.o : %.c
	$(CC) $(INCLUDES) $(CFLAGS) -c $< -o $@
$(OBJ_DIR)/%.o : %.cpp
	$(CC) $(INCLUDES) $(CFLAGS) -c $< -o $@
$(OBJ_DIR)/%.o : %.cp
	$(CC) $(INCLUDES) $(CFLAGS) -c $< -o $@
$(OBJ_DIR)/%.o : %.C
	$(CC) $(INCLUDES) $(CFLAGS) -c $< -o $@
$(OBJ_DIR)/%.o : %.CC
	$(CC) $(INCLUDES) $(CFLAGS) -c $< -o $@
$(OBJ_DIR)/%.o : %.CPP
	$(CC) $(INCLUDES) $(CFLAGS) -c $< -o $@


#	empty rule. Things that depend on this rule will always get triggered
FORCE:

#	The generic clean command. Delete everything in the object folder.
clean :: FORCE
	(cd javascript/seisdk/libs/beos && make clean)
	(cd SSLREF_300 && make clean)
	-rm -rf $(OBJ_DIR)/*

#	remove just the application from the object folder
rmapp ::
	-rm -f $(TARGET)

