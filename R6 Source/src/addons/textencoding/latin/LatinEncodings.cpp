
#include <textencoding/BTextEncoding.h>
#include <textencoding/TextEncodingNames.h>
#include <add-ons/textencoding/BTextCodec.h>
#include <add-ons/textencoding/BEncodingRun.h>
#include <string.h>

using namespace B::TextEncoding;

const BEncodingRun		ISO1_0080(0x0080, 0x00FF, 0x0080);

const BEncodingRun * const ISO1Stack[] = {
&ISO1_0080
};
const uint16 ISO1StackSize = 1;

// pragma mark -
const uint16	CP1252Block_0080[] = {
0x20AC, 0xFFFF, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021, 0x02C6, 0x2030, 0x0160, 0x2039, 0x0152, 0xFFFF, 0x017D, 0xFFFF,
0xFFFF, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014, 0x02DC, 0x2122, 0x0161, 0x203A, 0x0153, 0xFFFF, 0x017E, 0x0178
};
const BEncodingRun		CP1252_0080(0x0080, 0x009F, CP1252Block_0080);

const BEncodingRun		CP1252_00A0(0x00A0, 0x00FF, 0x00A0);

const BEncodingRun * const CP1252Stack[] = {
&CP1252_0080, &CP1252_00A0
};
const uint16 CP1252StackSize = 2;

// pragma mark -
const uint16	CP1250Block_0080[] = {
0x20AC, 0xFFFF, 0x201A, 0xFFFF, 0x201E, 0x2026, 0x2020, 0x2021, 0xFFFF, 0x2030, 0x0160, 0x2039, 0x015A, 0x0164, 0x017D, 0x0179,
0xFFFF, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014, 0xFFFF, 0x2122, 0x0161, 0x203A, 0x015B, 0x0165, 0x017E, 0x017A,
0x00A0, 0x02C7, 0x02D8, 0x0141, 0x00A4, 0x0104, 0x00A6, 0x00A7, 0x00A8, 0x00A9, 0x015E, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x017B,
0x00B0, 0x00B1, 0x02DB, 0x0142, 0x00B4, 0x00B5, 0x00B6, 0x00B7, 0x00B8, 0x0105, 0x015F, 0x00BB, 0x013D, 0x02DD, 0x013E, 0x017C,
0x0154, 0x00C1, 0x00C2, 0x0102, 0x00C4, 0x0139, 0x0106, 0x00C7, 0x010C, 0x00C9, 0x0118, 0x00CB, 0x011A, 0x00CD, 0x00CE, 0x010E,
0x0110, 0x0143, 0x0147, 0x00D3, 0x00D4, 0x0150, 0x00D6, 0x00D7, 0x0158, 0x016E, 0x00DA, 0x0170, 0x00DC, 0x00DD, 0x0162, 0x00DF,
0x0155, 0x00E1, 0x00E2, 0x0103, 0x00E4, 0x013A, 0x0107, 0x00E7, 0x010D, 0x00E9, 0x0119, 0x00EB, 0x011B, 0x00ED, 0x00EE, 0x010F,
0x0111, 0x0144, 0x0148, 0x00F3, 0x00F4, 0x0151, 0x00F6, 0x00F7, 0x0159, 0x016F, 0x00FA, 0x0171, 0x00FC, 0x00FD, 0x0163, 0x02D9
};
const BEncodingRun		CP1250_0080(0x0080, 0x00FF, CP1250Block_0080);


const BEncodingRun * const CP1250Stack[] = {
&CP1250_0080
};
const uint16 CP1250StackSize = 1;
// pragma mark -
const uint16	CP437Block_0080[] = {
0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x00E0, 0x00E5, 0x00E7, 0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x00EE, 0x00EC, 0x00C4, 0x00C5,
0x00C9, 0x00E6, 0x00C6, 0x00F4, 0x00F6, 0x00F2, 0x00FB, 0x00F9, 0x00FF, 0x00D6, 0x00DC, 0x00A2, 0x00A3, 0x00A5, 0x20A7, 0x0192,
0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x00AA, 0x00BA, 0x00BF, 0x2310, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00BB,
0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556, 0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F, 0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B, 0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
0x03B1, 0x00DF, 0x0393, 0x03C0, 0x03A3, 0x03C3, 0x00B5, 0x03C4, 0x03A6, 0x0398, 0x03A9, 0x03B4, 0x221E, 0x03C6, 0x03B5, 0x2229,
0x2261, 0x00B1, 0x2265, 0x2264, 0x2320, 0x2321, 0x00F7, 0x2248, 0x00B0, 0x2219, 0x00B7, 0x221A, 0x207F, 0x00B2, 0x25A0, 0x00A0
};
const BEncodingRun		CP437_0080(0x0080, 0x00FF, CP437Block_0080);


const BEncodingRun * const CP437Stack[] = {
&CP437_0080
};
const uint16 CP437StackSize = 1;
// pragma mark -
const uint16	CP850Block_0080[] = {
0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x00E0, 0x00E5, 0x00E7, 0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x00EE, 0x00EC, 0x00C4, 0x00C5,
0x00C9, 0x00E6, 0x00C6, 0x00F4, 0x00F6, 0x00F2, 0x00FB, 0x00F9, 0x00FF, 0x00D6, 0x00DC, 0x00F8, 0x00A3, 0x00D8, 0x00D7, 0x0192,
0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x00AA, 0x00BA, 0x00BF, 0x00AE, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00BB,
0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x00C1, 0x00C2, 0x00C0, 0x00A9, 0x2563, 0x2551, 0x2557, 0x255D, 0x00A2, 0x00A5, 0x2510,
0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x00E3, 0x00C3, 0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x00A4,
0x00F0, 0x00D0, 0x00CA, 0x00CB, 0x00C8, 0x0131, 0x00CD, 0x00CE, 0x00CF, 0x2518, 0x250C, 0x2588, 0x2584, 0x00A6, 0x00CC, 0x2580,
0x00D3, 0x00DF, 0x00D4, 0x00D2, 0x00F5, 0x00D5, 0x00B5, 0x00FE, 0x00DE, 0x00DA, 0x00DB, 0x00D9, 0x00FD, 0x00DD, 0x00AF, 0x00B4,
0x00AD, 0x00B1, 0x2017, 0x00BE, 0x00B6, 0x00A7, 0x00F7, 0x00B8, 0x00B0, 0x00A8, 0x00B7, 0x00B9, 0x00B3, 0x00B2, 0x25A0, 0x00A0
};
const BEncodingRun		CP850_0080(0x0080, 0x00FF, CP850Block_0080);


const BEncodingRun * const CP850Stack[] = {
&CP850_0080
};
const uint16 CP850StackSize = 1;

// pragma mark -
const uint16	CP852Block_0080[] = {
0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x016F, 0x0107, 0x00E7, 0x0142, 0x00EB, 0x0150, 0x0151, 0x00EE, 0x0179, 0x00C4, 0x0106,
0x00C9, 0x0139, 0x013A, 0x00F4, 0x00F6, 0x013D, 0x013E, 0x015A, 0x015B, 0x00D6, 0x00DC, 0x0164, 0x0165, 0x0141, 0x00D7, 0x010D,
0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x0104, 0x0105, 0x017D, 0x017E, 0x0118, 0x0119, 0x00AC, 0x017A, 0x010C, 0x015F, 0x00AB, 0x00BB,
0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x00C1, 0x00C2, 0x011A, 0x015E, 0x2563, 0x2551, 0x2557, 0x255D, 0x017B, 0x017C, 0x2510,
0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x0102, 0x0103, 0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x00A4,
0x0111, 0x0110, 0x010E, 0x00CB, 0x010F, 0x0147, 0x00CD, 0x00CE, 0x011B, 0x2518, 0x250C, 0x2588, 0x2584, 0x0162, 0x016E, 0x2580,
0x00D3, 0x00DF, 0x00D4, 0x0143, 0x0144, 0x0148, 0x0160, 0x0161, 0x0154, 0x00DA, 0x0155, 0x0170, 0x00FD, 0x00DD, 0x0163, 0x00B4,
0x00AD, 0x02DD, 0x02DB, 0x02C7, 0x02D8, 0x00A7, 0x00F7, 0x00B8, 0x00B0, 0x00A8, 0x02D9, 0x0171, 0x0158, 0x0159, 0x25A0, 0x00A0
};
const BEncodingRun		CP852_0080(0x0080, 0x00FF, CP852Block_0080);


const BEncodingRun * const CP852Stack[] = {
&CP852_0080
};
const uint16 CP852StackSize = 1;

// pragma mark -
const uint16	CP860Block_0080[] = {
0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E3, 0x00E0, 0x00C1, 0x00E7, 0x00EA, 0x00CA, 0x00E8, 0x00CD, 0x00D4, 0x00EC, 0x00C3, 0x00C2,
0x00C9, 0x00C0, 0x00C8, 0x00F4, 0x00F5, 0x00F2, 0x00DA, 0x00F9, 0x00CC, 0x00D5, 0x00DC, 0x00A2, 0x00A3, 0x00D9, 0x20A7, 0x00D3,
0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x00AA, 0x00BA, 0x00BF, 0x00D2, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00BB,
0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556, 0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F, 0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B, 0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
0x03B1, 0x00DF, 0x0393, 0x03C0, 0x03A3, 0x03C3, 0x00B5, 0x03C4, 0x03A6, 0x0398, 0x03A9, 0x03B4, 0x221E, 0x03C6, 0x03B5, 0x2229,
0x2261, 0x00B1, 0x2265, 0x2264, 0x2320, 0x2321, 0x00F7, 0x2248, 0x00B0, 0x2219, 0x00B7, 0x221A, 0x207F, 0x00B2, 0x25A0, 0x00A0
};
const BEncodingRun		CP860_0080(0x0080, 0x00FF, CP860Block_0080);


const BEncodingRun * const CP860Stack[] = {
&CP860_0080
};
const uint16 CP860StackSize = 1;
// pragma mark -
const BEncodingRun		ISO2_0080(0x0000, 0x00A0, 0x0080);

const uint16	ISO2Block_00A1[] = {
0x0104, 0x02D8, 0x0141, 0x00A4, 0x013D, 0x015A, 0x00A7, 0x00A8, 0x0160, 0x015E, 0x0164, 0x0179, 0x00AD, 0x017D, 0x017B, 0x00B0,
0x0105, 0x02DB, 0x0142, 0x00B4, 0x013E, 0x015B, 0x02C7, 0x00B8, 0x0161, 0x015F, 0x0165, 0x017A, 0x02DD, 0x017E, 0x017C, 0x0154,
0x00C1, 0x00C2, 0x0102, 0x00C4, 0x0139, 0x0106, 0x00C7, 0x010C, 0x00C9, 0x0118, 0x00CB, 0x011A, 0x00CD, 0x00CE, 0x010E, 0x0110,
0x0143, 0x0147, 0x00D3, 0x00D4, 0x0150, 0x00D6, 0x00D7, 0x0158, 0x016E, 0x00DA, 0x0170, 0x00DC, 0x00DD, 0x0162, 0x00DF, 0x0155,
0x00E1, 0x00E2, 0x0103, 0x00E4, 0x013A, 0x0107, 0x00E7, 0x010D, 0x00E9, 0x0119, 0x00EB, 0x011B, 0x00ED, 0x00EE, 0x010F, 0x0111,
0x0144, 0x0148, 0x00F3, 0x00F4, 0x0151, 0x00F6, 0x00F7, 0x0159, 0x016F, 0x00FA, 0x0171, 0x00FC, 0x00FD, 0x0163, 0x02D9
};
const BEncodingRun		ISO2_00A1(0x00A1, 0x00FF, ISO2Block_00A1);


const BEncodingRun * const ISO2Stack[] = {
&ISO2_0080, &ISO2_00A1
};
const uint16 ISO2StackSize = 2;
// pragma mark -
const BEncodingRun		ISO3_0080(0x0080, 0x00A0, 0x0080);

const uint16	ISO3Block_00A1[] = {
0x0126, 0x02D8, 0x00A3, 0x00A4, 0xFFFF, 0x0124, 0x00A7, 0x00A8, 0x0130, 0x015E, 0x011E, 0x0134, 0x00AD, 0xFFFF, 0x017B, 0x00B0,
0x0127, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x0125, 0x00B7, 0x00B8, 0x0131, 0x015F, 0x011F, 0x0135, 0x00BD, 0xFFFF, 0x017C, 0x00C0,
0x00C1, 0x00C2
};
const BEncodingRun		ISO3_00A1(0x00A1, 0x00C2, ISO3Block_00A1);


const uint16	ISO3Block_00C4[] = {
0x00C4, 0x010A, 0x0108
};
const BEncodingRun		ISO3_00C4(0x00C4, 0x00C6, ISO3Block_00C4);

const BEncodingRun		ISO3_00C7(0x00C7, 0x00CF, 0x00C7);

const uint16	ISO3Block_00D1[] = {
0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x0120, 0x00D6, 0x00D7, 0x011C, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x016C, 0x015C, 0x00DF, 0x00E0,
0x00E1, 0x00E2
};
const BEncodingRun		ISO3_00D1(0x00D1, 0x00E2, ISO3Block_00D1);


const uint16	ISO3Block_00E4[] = {
0x00E4, 0x010B, 0x0109
};
const BEncodingRun		ISO3_00E4(0x00E4, 0x00E6, ISO3Block_00E4);

const BEncodingRun		ISO3_00E7(0x00E7, 0x00F4, 0x00E7);

const uint16	ISO3Block_00F1[] = {
0x0121, 0x00F6, 0x00F7, 0x011D, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x016D, 0x015D, 0x02D9
};
const BEncodingRun		ISO3_00F1(0x00F5, 0x00FF, ISO3Block_00F1);


const BEncodingRun * const ISO3Stack[] = {
&ISO3_0080, &ISO3_00A1, &ISO3_00C4, &ISO3_00C7, &ISO3_00D1, &ISO3_00E4, &ISO3_00E7, &ISO3_00F1
};
const uint16 ISO3StackSize = 8;

const BReplacement	ISO3Replace_00EF(0x00EF, 0xFFFF);
const BReplacement * const ISO3Replacements[] = {
&ISO3Replace_00EF
};
const uint16 ISO3ReplacementCount = 1;
// pragma mark -
const uint16	MacCenteuroBlock_0080[] = {
0x00C4, 0x0100, 0x0101, 0x00C9, 0x0104, 0x00D6, 0x00DC, 0x00E1, 0x0105, 0x010C, 0x00E4, 0x010D, 0x0106, 0x0107, 0x00E9, 0x0179,
0x017A, 0x010E, 0x00ED, 0x010F, 0x0112, 0x0113, 0x0116, 0x00F3, 0x0117, 0x00F4, 0x00F6, 0x00F5, 0x00FA, 0x011A, 0x011B, 0x00FC,
0x2020, 0x00B0, 0x0118, 0x00A3, 0x00A7, 0x2022, 0x00B6, 0x00DF, 0x00AE, 0x00A9, 0x2122, 0x0119, 0x00A8, 0x2260, 0x0123, 0x012E,
0x012F, 0x012A, 0x2264, 0x2265, 0x012B, 0x0136, 0x2202, 0x2211, 0x0142, 0x013B, 0x013C, 0x013D, 0x013E, 0x0139, 0x013A, 0x0145,
0x0146, 0x0143, 0x00AC, 0x221A, 0x0144, 0x0147, 0x2206, 0x00AB, 0x00BB, 0x2026, 0x00A0, 0x0148, 0x0150, 0x00D5, 0x0151, 0x014C,
0x2013, 0x2014, 0x201C, 0x201D, 0x2018, 0x2019, 0x00F7, 0x25CA, 0x014D, 0x0154, 0x0155, 0x0158, 0x2039, 0x203A, 0x0159, 0x0156,
0x0157, 0x0160, 0x201A, 0x201E, 0x0161, 0x015A, 0x015B, 0x00C1, 0x0164, 0x0165, 0x00CD, 0x017D, 0x017E, 0x016A, 0x00D3, 0x00D4,
0x016B, 0x016E, 0x00DA, 0x016F, 0x0170, 0x0171, 0x0172, 0x0173, 0x00DD, 0x00FD, 0x0137, 0x017B, 0x0141, 0x017C, 0x0122, 0x02C7
};
const BEncodingRun		MacCenteuro_0080(0x0080, 0x00FF, MacCenteuroBlock_0080);


const BEncodingRun * const MacCenteuroStack[] = {
&MacCenteuro_0080
};
const uint16 MacCenteuroStackSize = 1;
// pragma mark -
const uint16	MacRomanBlock_0080[] = {
0x00C4, 0x00C5, 0x00C7, 0x00C9, 0x00D1, 0x00D6, 0x00DC, 0x00E1, 0x00E0, 0x00E2, 0x00E4, 0x00E3, 0x00E5, 0x00E7, 0x00E9, 0x00E8,
0x00EA, 0x00EB, 0x00ED, 0x00EC, 0x00EE, 0x00EF, 0x00F1, 0x00F3, 0x00F2, 0x00F4, 0x00F6, 0x00F5, 0x00FA, 0x00F9, 0x00FB, 0x00FC,
0x2020, 0x00B0, 0x00A2, 0x00A3, 0x00A7, 0x2022, 0x00B6, 0x00DF, 0x00AE, 0x00A9, 0x2122, 0x00B4, 0x00A8, 0x2260, 0x00C6, 0x00D8,
0x221E, 0x00B1, 0x2264, 0x2265, 0x00A5, 0x00B5, 0x2202, 0x2211, 0x220F, 0x03C0, 0x222B, 0x00AA, 0x00BA, 0x03A9, 0x00E6, 0x00F8,
0x00BF, 0x00A1, 0x00AC, 0x221A, 0x0192, 0x2248, 0x2206, 0x00AB, 0x00BB, 0x2026, 0x00A0, 0x00C0, 0x00C3, 0x00D5, 0x0152, 0x0153,
0x2013, 0x2014, 0x201C, 0x201D, 0x2018, 0x2019, 0x00F7, 0x25CA, 0x00FF, 0x0178, 0x2044, 0x20AC, 0x2039, 0x203A, 0xFB01, 0xFB02,
0x2021, 0x00B7, 0x201A, 0x201E, 0x2030, 0x00C2, 0x00CA, 0x00C1, 0x00CB, 0x00C8, 0x00CD, 0x00CE, 0x00CF, 0x00CC, 0x00D3, 0x00D4,
0xF8FF, 0x00D2, 0x00DA, 0x00DB, 0x00D9, 0x0131, 0x02C6, 0x02DC, 0x00AF, 0x02D8, 0x02D9, 0x02DA, 0x00B8, 0x02DD, 0x02DB, 0x02C7
};
const BEncodingRun		MacRoman_0080(0x0080, 0x00FF, MacRomanBlock_0080);


const BEncodingRun * const MacRomanStack[] = {
&MacRoman_0080
};
const uint16 MacRomanStackSize = 1;
// pragma mark -
const BEncodingRun		ISO15_0080(0x0080, 0x00A3, 0x0080);

const uint16	ISO15Block_00A4[] = {
0x20AC, 0x00A5, 0x0160, 0x00A7, 0x0161
};
const BEncodingRun		ISO15_00A4(0x00A4, 0x00A8, ISO15Block_00A4);

const BEncodingRun		ISO15_00A9(0x00A9, 0x00B3, 0x00A9);

const uint16	ISO15Block_00B4[] = {
0x017D, 0x00B5, 0x00B6, 0x00B7, 0x017E, 0x00B9, 0x00BA, 0x00BB, 0x0152, 0x0153, 0x0178
};
const BEncodingRun		ISO15_00B4(0x00B4, 0x00BE, ISO15Block_00B4);

const BEncodingRun		ISO15_00BF(0x00BF, 0x00FF, 0x00BF);

const BEncodingRun * const ISO15Stack[] = {
&ISO15_0080, &ISO15_00A4, &ISO15_00A9, &ISO15_00B4, &ISO15_00BF
};
const uint16 ISO15StackSize = 5;
// pragma mark -
const uint16	AdobeStdBlock_0020[] = {
0x0020, 0x0021, 0x0022, 0x0023, 0x0024, 0x0025, 0x0026, 0x2019, 0x0028, 0x0029, 0x002A, 0x002B, 0x002C, 0x002D, 0x00AD
};
const BEncodingRun		AdobeStd_0020(0x0020, 0x002D, AdobeStdBlock_0020);

const BEncodingRun		AdobeStd_002E(0x002E, 0x007E, 0x002E);

const uint16	AdobeStdBlock_00A1[] = {
0x00A1, 0x00A2, 0x00A3, 0x2215
};
const BEncodingRun		AdobeStd_00A1(0x00A1, 0x00A4, AdobeStdBlock_00A1);


const uint16	AdobeStdBlock_00A4[] = {
0x2044, 0x00A5, 0x0192, 0x00A7, 0x00A4, 0x0027, 0x201C, 0x00AB, 0x2039, 0x203A, 0xFB01, 0xFB02
};
const BEncodingRun		AdobeStd_00A4(0x00A4, 0x00AF, AdobeStdBlock_00A4);


const uint16	AdobeStdBlock_00B1[] = {
0x2013, 0x2020, 0x2021, 0x2219, 0x00B7
};
const BEncodingRun		AdobeStd_00B1(0x00B1, 0x00B4, AdobeStdBlock_00B1);


const uint16	AdobeStdBlock_00B6[] = {
0x00B6, 0x2022, 0x201A, 0x201E, 0x201D, 0x00BB, 0x2026, 0x2030
};
const BEncodingRun		AdobeStd_00B6(0x00B6, 0x00BD, AdobeStdBlock_00B6);


const uint16	AdobeStdBlock_00C1[] = {
0x0060, 0x00B4, 0x02C6, 0x02DC, 0x00AF
};
const BEncodingRun		AdobeStd_00C1(0x00C1, 0x00C5, AdobeStdBlock_00C1);


const uint16	AdobeStdBlock_00C5[] = {
0x02C9, 0x02D8, 0x02D9, 0x00A8
};
const BEncodingRun		AdobeStd_00C5(0x00C5, 0x00C8, AdobeStdBlock_00C5);


const uint16	AdobeStdBlock_00CA[] = {
0x02DA, 0x00B8
};
const BEncodingRun		AdobeStd_00CA(0x00CA, 0x00CB, AdobeStdBlock_00CA);


const uint16	AdobeStdBlock_00CD[] = {
0x02DD, 0x02DB, 0x02C7, 0x2014
};
const BEncodingRun		AdobeStd_00CD(0x00CD, 0x00D0, AdobeStdBlock_00CD);


const uint16	AdobeStdBlock_00E8[] = {
0x0141, 0x00D8, 0x0152, 0x00BA
};
const BEncodingRun		AdobeStd_00E8(0x00E8, 0x00EB, AdobeStdBlock_00E8);


const uint16	AdobeStdBlock_00F8[] = {
0x0142, 0x00F8, 0x0153, 0x00DF
};
const BEncodingRun		AdobeStd_00F8(0x00F8, 0x00FB, AdobeStdBlock_00F8);


const BEncodingRun * const AdobeStdStack[] = {
&AdobeStd_0020, &AdobeStd_002E, &AdobeStd_00A1, &AdobeStd_00A4, &AdobeStd_00B1, &AdobeStd_00B6, &AdobeStd_00C1, &AdobeStd_00C5, &AdobeStd_00CA,
&AdobeStd_00CD, &AdobeStd_00E8, &AdobeStd_00F8
};
const uint16 AdobeStdStackSize = 12;

const BReplacement	AdobeStdReplace_0060(0x0060, 0x2018);
const BReplacement	AdobeStdReplace_00BF(0x00BF, 0x00BF);
const BReplacement	AdobeStdReplace_00E1(0x00E1, 0x00C6);
const BReplacement	AdobeStdReplace_00E3(0x00E3, 0x00AA);
const BReplacement	AdobeStdReplace_00F1(0x00F1, 0x00E6);
const BReplacement	AdobeStdReplace_00F5(0x00F5, 0x0131);
const BReplacement * const AdobeStdReplacements[] = {
&AdobeStdReplace_0060, &AdobeStdReplace_00BF, &AdobeStdReplace_00E1, &AdobeStdReplace_00E3, &AdobeStdReplace_00F1, &AdobeStdReplace_00F5
};
const uint16 AdobeStdReplacementCount = 6;
// pragma mark -

const BEncodingRun	MacExpert_0000(0x0000, 0x0020, (uint16)0x0000);

const uint16		MacExpertBlock_0021[] = {
0xF721, 0xF6F8, 0xF7A2, 0xF724, 0xF6E4, 0xF726, 0xF7B4, 0x207D, 0x207E, 0x2025, 0x2024, 0x002C, 0x002D, 0x002E, 0x2044, 
0xF730, 0xF731, 0xF732, 0xF733, 0xF734, 0xF735, 0xF736, 0xF737, 0xF738, 0xF739, 0x003A, 0x003B, 0x003C, 0xF6DE, 0x003E, 0xF73F, 
0x0040, 0x0041, 0x0042, 0x0043, 0xF7F0, 0x0045, 0x0046, 0x00BC, 0x00BD, 0x00BE, 0x215B, 0x215C, 0x215D, 0x215E, 0x2153, 0x2154, 
0x0050, 0x0051, 0x0052, 0x0053, 0x0054, 0x0055, 0xFB00, 0xFB01, 0xFB02, 0xFB03, 0xFB04, 0x208D, 0x005C, 0x208E, 0xF6F6, 0xF6E5,
0xF760, 0xF761, 0xF762, 0xF763, 0xF764, 0xF765, 0xF766, 0xF767, 0xF768, 0xF769, 0xF76A, 0xF76B, 0xF76C, 0xF76D, 0xF76E, 0xF76F, 
0xF770, 0xF771, 0xF772, 0xF773, 0xF774, 0xF775, 0xF776, 0xF777, 0xF778, 0xF779, 0xF77A, 0x20A1, 0xF6DC, 0xF6DD, 0xF6FE, 0x007F, 
0x0080, 0xF6E9, 0xF6E0, 0x0083, 0x0084, 0x0085, 0x0086, 0xF7E1, 0xF7E0, 0xF7E2, 0xF7E4, 0xF7E3, 0xF7E5, 0xF7E7, 0xF7E9, 0xF7E8, 
0xF7EA, 0xF7EB, 0xF7ED, 0xF7EC, 0xF7EE, 0xF7EF, 0xF7F1, 0xF7F3, 0xF7F2, 0xF7F4, 0xF7F6, 0xF7F5, 0xF7FA, 0xF7F9, 0xF7FB, 0xF7FC, 
0x00A0, 0x2078, 0x2084, 0x2083, 0x2086, 0x2088, 0x2087, 0xF6FD, 0x00A8, 0xF6DF, 0x2082, 0x00AB, 0xF7A8, 0x00AD, 0xF6F5, 0xF6F0, 
0x2085, 0x00B1, 0xF6E1, 0xF6E7, 0xF7FD, 0x00B5, 0xF6E3, 0x00B7, 0x00B8, 0xF7FE, 0x00BA, 0x2089, 0x2080, 0xF6FF, 0xF7E6, 0xF7F8, 
0xF7BF, 0x2081, 0xF6F9, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x00C7, 0x00C8, 0xF7B8, 0x00CA, 0x00CB, 0x00CC, 0x00CD, 0x00CE, 0xF6FA, 
0x2012, 0xF6E6, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0xF7A1, 0x00D7, 0xF7FF, 0x00D9, 0x00B9, 0x00B2, 0x00B3, 0x2074, 0x2075, 0x2076, 
0x2077, 0x2079, 0x2070, 0x00E3, 0xF6EC, 0xF6F1, 0xF6F3, 0x00E7, 0x00E8, 0xF6ED, 0xF6F2, 0xF6EB, 0x00EC, 0x00ED, 0x00EE, 0x00EF, 
0x00F0, 0xF6EE, 0xF6FB, 0xF6F4, 0xF7AF, 0xF6EA, 0x207F, 0xF6EF, 0xF6E2, 0xF6E8, 0xF6F7, 0xF6FC, 0x00FC, 0x00FD, 0x00FE, 0x00FF
};
const BEncodingRun		MacExpert_0021(0x0021, 0x00FF, MacExpertBlock_0021);

const BEncodingRun * const MacExpertStack[] = {
&MacExpert_0000, &MacExpert_0021
};

const uint16 MacExpertStackSize = 2;

// pragma mark -

const BEncodingRun		Unicode_0080(0x0080, 0xffff, 0x0080);
const BEncodingRun * const UnicodeStack[] = {
&Unicode_0080
};
const uint16 UnicodeStackSize = 1;

// pragma mark -

BTextCodec * make_codec(const char * encoding, BTextEncodingAddOn *addOn) {
	if (strcasecmp(encoding, ISO1Name) == 0)
		return new BTextCodec(ISO1Stack, ISO1StackSize, NULL, 0, addOn, USES_ASCII);

	if (strcasecmp(encoding, UnicodeName) == 0)
		return new BTextCodec(UnicodeStack, UnicodeStackSize, NULL, 0, addOn, USES_ASCII);
	
	else if (strcasecmp(encoding,CP1252Name) == 0)
		return new BTextCodec(CP1252Stack, CP1252StackSize, NULL, 0, addOn, USES_ASCII);

	else if (strcasecmp(encoding, CP1250Name) == 0)
		return new BTextCodec(CP1250Stack, CP1250StackSize, NULL, 0, addOn, USES_ASCII);
	else if (strcasecmp(encoding,CP437Name) == 0)
		return new BTextCodec(CP437Stack, CP437StackSize, NULL, 0, addOn, USES_ASCII);

	else if (strcasecmp(encoding,CP850Name) == 0)
		return new BTextCodec(CP850Stack, CP850StackSize, NULL, 0, addOn, USES_ASCII);
	else if (strcasecmp(encoding,CP852Name) == 0)
		return new BTextCodec(CP852Stack, CP852StackSize, NULL, 0, addOn, USES_ASCII);
	else if (strcasecmp(encoding,CP860Name) == 0)
		return new BTextCodec(CP860Stack, CP860StackSize, NULL, 0, addOn, USES_ASCII);
	else if (strcasecmp(encoding, ISO2Name) == 0)
		return new BTextCodec(ISO2Stack, ISO2StackSize, NULL, 0, addOn, USES_ASCII);
	else if (strcasecmp(encoding, ISO3Name) == 0)
		return new BTextCodec(ISO3Stack, ISO3StackSize, ISO3Replacements, ISO3ReplacementCount, addOn, USES_ASCII);
	else if (strcasecmp(encoding,MacCenteuroName) == 0)
		return new BTextCodec(MacCenteuroStack, MacCenteuroStackSize, NULL, 0, addOn, USES_ASCII);
	else if (strcasecmp(encoding,MacRomanName) == 0)
		return new BTextCodec(MacRomanStack, MacRomanStackSize, NULL, 0, addOn, USES_ASCII);
	else if (strcasecmp(encoding, ISO15Name) == 0)
		return new BTextCodec(ISO15Stack, ISO15StackSize, NULL, 0, addOn, USES_ASCII);
	else if (strcasecmp(encoding,AdobeStdName) == 0)
		return new BTextCodec(AdobeStdStack, AdobeStdStackSize, AdobeStdReplacements, AdobeStdReplacementCount, addOn);
	else if (strcasecmp(encoding, MacExpertName) == 0)
 		return new BTextCodec(MacExpertStack, MacExpertStackSize, NULL, 0, addOn);

	else
		return NULL;
}

