
#include <textencoding/BTextEncoding.h>
#include <textencoding/TextEncodingNames.h>
#include <add-ons/textencoding/BTextCodec.h>
#include <add-ons/textencoding/BEncodingRun.h>

using namespace B::TextEncoding;

const BEncodingRun		ISO10_0080(0x0080, 0x00A0, 0x0080);

const uint16	ISO10Block_00A1[] = {
0x0104, 0x0112, 0x0122, 0x012A, 0x0128, 0x0136, 0x00A7, 0x013B, 0x0110, 0x0160, 0x0166, 0x017D, 0x00AD, 0x016A, 0x014A, 0x00B0,
0x0105, 0x0113, 0x0123, 0x012B, 0x0129, 0x0137, 0x00B7, 0x013C, 0x0111, 0x0161, 0x0167, 0x017E, 0x2015, 0x016B, 0x014B, 0x0100,
0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x012E, 0x010C, 0x00C9, 0x0118, 0x00CB, 0x0116, 0x00CD, 0x00CE, 0x00CF, 0x00D0,
0x0145, 0x014C, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x0168, 0x00D8, 0x0172, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x00DE, 0x00DF, 0x0101,
0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x012F, 0x010D, 0x00E9, 0x0119, 0x00EB, 0x0117, 0x00ED, 0x00EE, 0x00EF, 0x00F0,
0x0146, 0x014D, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x0169, 0x00F8, 0x0173, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x00FE, 0x0138
};
const BEncodingRun		ISO10_00A1(0x00A1, 0x00FF, ISO10Block_00A1);


const BEncodingRun * const ISO10Stack[] = {
&ISO10_0080, &ISO10_00A1
};
const uint16 ISO10StackSize = 2;
// pragma mark -
const uint16	CP1258Block_0080[] = {
0x20AC, 0xFFFF, 0x201A, 0x0192, 0x201E, 0x2026, 0x2020, 0x2021, 0x02C6, 0x2030, 0xFFFF, 0x2039, 0x0152, 0xFFFF, 0xFFFF, 0xFFFF,
0xFFFF, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014, 0x02DC, 0x2122, 0xFFFF, 0x203A, 0x0153
};
const BEncodingRun		CP1258_0080(0x0080, 0x009C, CP1258Block_0080);

const BEncodingRun		CP1258_00A0(0x00A0, 0x00FF, 0x00A0);

const BEncodingRun * const CP1258Stack[] = {
&CP1258_0080, &CP1258_00A0
};
const uint16 CP1258StackSize = 2;

const BReplacement	CP1258Replace_009F(0x009F, 0x0178);
const BReplacement	CP1258Replace_00C3(0x00C3,	0x0102);
const BReplacement	CP1258Replace_00CC(0x00CC,	0x0300);
const BReplacement	CP1258Replace_00D0(0x00D0,	0x0110);
const BReplacement	CP1258Replace_00D2(0x00D2,	0x0309);
const BReplacement	CP1258Replace_00D5(0x00D5,	0x01A0);
const BReplacement	CP1258Replace_00DD(0x00DD,	0x01AF);
const BReplacement	CP1258Replace_00DE(0x00DE,	0x0303);
const BReplacement	CP1258Replace_00E3(0x00E3,	0x0103);
const BReplacement	CP1258Replace_00EC(0x00EC,	0x0301);
const BReplacement	CP1258Replace_00F0(0x00F0,	0x0111);
const BReplacement	CP1258Replace_00F2(0x00F2,	0x0323);
const BReplacement	CP1258Replace_00F5(0x00F5,	0x01A1);
const BReplacement	CP1258Replace_00FD(0x00FD,	0x01B0);
const BReplacement	CP1258Replace_00FE(0x00FE,	0x20AB);

const BReplacement * const CP1258Replacements[] = {
&CP1258Replace_009F, &CP1258Replace_00C3, &CP1258Replace_00CC, &CP1258Replace_00D0, &CP1258Replace_00D2, &CP1258Replace_00D5,
&CP1258Replace_00DD, &CP1258Replace_00DE, &CP1258Replace_00E3, &CP1258Replace_00EC, &CP1258Replace_00F0, &CP1258Replace_00F2,
&CP1258Replace_00F5, &CP1258Replace_00FD, &CP1258Replace_00FE
};
const uint16 CP1258ReplacementCount = 15;
// pragma mark -
const uint16	CP861Block_0080[] = {
0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x00E0, 0x00E5, 0x00E7, 0x00EA, 0x00EB, 0x00E8, 0x00D0, 0x00F0, 0x00DE, 0x00C4, 0x00C5,
0x00C9, 0x00E6, 0x00C6, 0x00F4, 0x00F6, 0x00FE, 0x00FB, 0x00DD, 0x00FD, 0x00D6, 0x00DC, 0x00F8, 0x00A3, 0x00D8, 0x20A7, 0x0192,
0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00C1, 0x00CD, 0x00D3, 0x00DA, 0x00BF, 0x2310, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00BB,
0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556, 0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F, 0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B, 0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
0x03B1, 0x00DF, 0x0393, 0x03C0, 0x03A3, 0x03C3, 0x00B5, 0x03C4, 0x03A6, 0x0398, 0x03A9, 0x03B4, 0x221E, 0x03C6, 0x03B5, 0x2229,
0x2261, 0x00B1, 0x2265, 0x2264, 0x2320, 0x2321, 0x00F7, 0x2248, 0x00B0, 0x2219, 0x00B7, 0x221A, 0x207F, 0x00B2, 0x25A0, 0x00A0
};
const BEncodingRun		CP861_0080(0x0080, 0x00FF, CP861Block_0080);


const BEncodingRun * const CP861Stack[] = {
&CP861_0080
};
const uint16 CP861StackSize = 1;
// pragma mark -
const uint16	CP863Block_0080[] = {
0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00C2, 0x00E0, 0x00B6, 0x00E7, 0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x00EE, 0x2017, 0x00C0, 0x00A7,
0x00C9, 0x00C8, 0x00CA, 0x00F4, 0x00CB, 0x00CF, 0x00FB, 0x00F9, 0x00A4, 0x00D4, 0x00DC, 0x00A2, 0x00A3, 0x00D9, 0x00DB, 0x0192,
0x00A6, 0x00B4, 0x00F3, 0x00FA, 0x00A8, 0x00B8, 0x00B3, 0x00AF, 0x00CE, 0x2310, 0x00AC, 0x00BD, 0x00BC, 0x00BE, 0x00AB, 0x00BB,
0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556, 0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F, 0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B, 0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
0x03B1, 0x00DF, 0x0393, 0x03C0, 0x03A3, 0x03C3, 0x00B5, 0x03C4, 0x03A6, 0x0398, 0x03A9, 0x03B4, 0x221E, 0x03C6, 0x03B5, 0x2229,
0x2261, 0x00B1, 0x2265, 0x2264, 0x2320, 0x2321, 0x00F7, 0x2248, 0x00B0, 0x2219, 0x00B7, 0x221A, 0x207F, 0x00B2, 0x25A0, 0x00A0
};
const BEncodingRun		CP863_0080(0x0080, 0x00FF, CP863Block_0080);


const BEncodingRun * const CP863Stack[] = {
&CP863_0080
};
const uint16 CP863StackSize = 1;
// pragma mark -
const uint16	CP865Block_0080[] = {
0x00C7, 0x00FC, 0x00E9, 0x00E2, 0x00E4, 0x00E0, 0x00E5, 0x00E7, 0x00EA, 0x00EB, 0x00E8, 0x00EF, 0x00EE, 0x00EC, 0x00C4, 0x00C5,
0x00C9, 0x00E6, 0x00C6, 0x00F4, 0x00F6, 0x00F2, 0x00FB, 0x00F9, 0x00FF, 0x00D6, 0x00DC, 0x00F8, 0x00A3, 0x00D8, 0x20A7, 0x0192,
0x00E1, 0x00ED, 0x00F3, 0x00FA, 0x00F1, 0x00D1, 0x00AA, 0x00BA, 0x00BF, 0x2310, 0x00AC, 0x00BD, 0x00BC, 0x00A1, 0x00AB, 0x00A4,
0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556, 0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F, 0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B, 0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
0x03B1, 0x00DF, 0x0393, 0x03C0, 0x03A3, 0x03C3, 0x00B5, 0x03C4, 0x03A6, 0x0398, 0x03A9, 0x03B4, 0x221E, 0x03C6, 0x03B5, 0x2229,
0x2261, 0x00B1, 0x2265, 0x2264, 0x2320, 0x2321, 0x00F7, 0x2248, 0x00B0, 0x2219, 0x00B7, 0x221A, 0x207F, 0x00B2, 0x25A0, 0x00A0
};
const BEncodingRun		CP865_0080(0x0080, 0x00FF, CP865Block_0080);


const BEncodingRun * const CP865Stack[] = {
&CP865_0080
};
const uint16 CP865StackSize = 1;
// pragma mark -
const uint16	CP874Block_0091[] = {
0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014
};
const BEncodingRun		CP874_0091(0x0091, 0x0097, CP874Block_0091);

const BEncodingRun		CP874_00A1(0x00A1, 0x00DA, 0x0E01);
const BEncodingRun		CP874_00DF(0x00DF, 0x00FB, 0x0E3F);

const BEncodingRun * const CP874Stack[] = {
&CP874_0091, &CP874_00A1, &CP874_00DF
};
const uint16 CP874StackSize = 3;

const BReplacement	CP874Replace_0080(0x0080, 0x20AC);
const BReplacement	CP874Replace_0085(0x0085, 0x2026);
const BReplacement	CP874Replace_00A0(0x00A0, 0x00A0);
const BReplacement * const CP874Replacements[] = {
&CP874Replace_0080, &CP874Replace_0085, &CP874Replace_00A0
};
const uint16 CP874ReplacementCount = 3;
// pragma mark -
const BEncodingRun		ISO14_0080(0x0080, 0x00A0, 0x0080);

const uint16	ISO14Block_00A1[] = {
0x1E02, 0x1E03, 0x00A3, 0x010A, 0x010B, 0x1E0A, 0x00A7, 0x1E80, 0x00A9, 0x1E82, 0x1E0B, 0x1EF2, 0x00AD, 0x00AE, 0x0178, 0x1E1E,
0x1E1F, 0x0120, 0x0121, 0x1E40, 0x1E41, 0x00B6, 0x1E56, 0x1E81, 0x1E57, 0x1E83, 0x1E60, 0x1EF3, 0x1E84, 0x1E85, 0x1E61
};
const BEncodingRun		ISO14_00A1(0x00A1, 0x00BF, ISO14Block_00A1);

const BEncodingRun		ISO14_00C0(0x00C0, 0x00CF, 0x00C0);

const uint16	ISO14Block_00D0[] = {
0x0174, 0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6, 0x1E6A, 0x00D8, 0x00D9, 0x00DA, 0x00DB, 0x00DC, 0x00DD, 0x0176
};
const BEncodingRun		ISO14_00D0(0x00D0, 0x00DE, ISO14Block_00D0);

const BEncodingRun		ISO14_00DF(0x00DF, 0x00EF, 0x00DF);

const uint16	ISO14Block_00F0[] = {
0x0175, 0x00F1, 0x00F2, 0x00F3, 0x00F4, 0x00F5, 0x00F6, 0x1E6B, 0x00F8, 0x00F9, 0x00FA, 0x00FB, 0x00FC, 0x00FD, 0x0177, 0x00FF
};
const BEncodingRun		ISO14_00F0(0x00F0, 0x00FF, ISO14Block_00F0);


const BEncodingRun * const ISO14Stack[] = {
&ISO14_0080, &ISO14_00A1, &ISO14_00C0, &ISO14_00D0, &ISO14_00DF, &ISO14_00F0
};
const uint16 ISO14StackSize = 6;
// pragma mark -
const BEncodingRun		ISO4_0080(0x0080, 0x00A0, 0x0080);

const uint16	ISO4Block_00A1[] = {
0x0104, 0x0138, 0x0156, 0x00A4, 0x0128, 0x013B, 0x00A7, 0x00A8, 0x0160, 0x0112, 0x0122, 0x0166, 0x00AD, 0x017D, 0x00AF, 0x00B0,
0x0105, 0x02DB, 0x0157, 0x00B4, 0x0129, 0x013C, 0x02C7, 0x00B8, 0x0161, 0x0113, 0x0123, 0x0167, 0x014A, 0x017E, 0x014B, 0x0100,
0x00C1, 0x00C2, 0x00C3, 0x00C4, 0x00C5, 0x00C6, 0x012E, 0x010C, 0x00C9, 0x0118, 0x00CB, 0x0116, 0x00CD, 0x00CE, 0x012A, 0x0110,
0x0145, 0x014C, 0x0136, 0x00D4, 0x00D5, 0x00D6, 0x00D7, 0x00D8, 0x0172, 0x00DA, 0x00DB, 0x00DC, 0x0168, 0x016A, 0x00DF, 0x0101,
0x00E1, 0x00E2, 0x00E3, 0x00E4, 0x00E5, 0x00E6, 0x012F, 0x010D, 0x00E9, 0x0119, 0x00EB, 0x0117, 0x00ED, 0x00EE, 0x012B, 0x0111,
0x0146, 0x014D, 0x0137, 0x00F4, 0x00F5, 0x00F6, 0x00F7, 0x00F8, 0x0173, 0x00FA, 0x00FB, 0x00FC, 0x0169, 0x016B, 0x02D9
};
const BEncodingRun		ISO4_00A1(0x00A1, 0x00FF, ISO4Block_00A1);


const BEncodingRun * const ISO4Stack[] = {
&ISO4_0080, &ISO4_00A1
};
const uint16 ISO4StackSize = 2;
// pragma mark -
const uint16	AdobeSymbolBlock_0020[] = {
0x0020, 0x0021, 0x2200, 0x0023, 0x2203, 0x0025, 0x0026, 0x220B, 0x0028, 0x0029, 0x2217, 0x002B, 0x002C, 0x2212
};
const BEncodingRun		AdobeSymbol_0020(0x0020, 0x002D, AdobeSymbolBlock_0020);

const BEncodingRun		AdobeSymbol_002E(0x002E, 0x003F, 0x002E);

const uint16	AdobeSymbolBlock_0040[] = {
0x2245, 0x0391, 0x0392, 0x03A7, 0x0394
};
const BEncodingRun		AdobeSymbol_0040(0x0040, 0x0044, AdobeSymbolBlock_0040);


const uint16	AdobeSymbolBlock_0044[] = {
0x2206, 0x0395, 0x03A6, 0x0393, 0x0397, 0x0399, 0x03D1, 0x039A, 0x039B, 0x039C, 0x039D, 0x039F, 0x03A0, 0x0398, 0x03A1, 0x03A3,
0x03A4, 0x03A5, 0x03C2, 0x03A9
};
const BEncodingRun		AdobeSymbol_0044(0x0044, 0x0057, AdobeSymbolBlock_0044);


const uint16	AdobeSymbolBlock_0057[] = {
0x2126, 0x039E, 0x03A8, 0x0396, 0x005B, 0x2234, 0x005D, 0x22A5, 0x005F, 0xF8E5, 0x03B1, 0x03B2, 0x03C7, 0x03B4, 0x03B5, 0x03C6,
0x03B3, 0x03B7, 0x03B9, 0x03D5, 0x03BA, 0x03BB, 0x03BC, 0x03BD, 0x03BF, 0x03C0, 0x03B8, 0x03C1, 0x03C3, 0x03C4, 0x03C5, 0x03D6,
0x03C9, 0x03BE, 0x03C8, 0x03B6, 0x007B, 0x007C, 0x007D, 0x223C
};
const BEncodingRun		AdobeSymbol_0057(0x0057, 0x007E, AdobeSymbolBlock_0057);


const uint16	AdobeSymbolBlock_00A0[] = {
0x20AC, 0x03D2, 0x2032, 0x2264, 0x2044, 0x221E, 0x0192, 0x2663, 0x2666, 0x2665, 0x2660, 0x2194, 0x2190, 0x2191, 0x2192, 0x2193,
0x00B0, 0x00B1, 0x2033, 0x2265, 0x00D7, 0x221D, 0x2202, 0x2022, 0x00F7, 0x2260, 0x2261, 0x2248, 0x2026, 0xF8E6, 0xF8E7, 0x21B5,
0x2135, 0x2111, 0x211C, 0x2118, 0x2297, 0x2295, 0x2205, 0x2229, 0x222A, 0x2283, 0x2287, 0x2284, 0x2282, 0x2286, 0x2208, 0x2209,
0x2220, 0x2207, 0xF6DA, 0xF6D9, 0xF6DB, 0x220F, 0x221A, 0x22C5, 0x00AC, 0x2227, 0x2228, 0x21D4, 0x21D0, 0x21D1, 0x21D2, 0x21D3,
0x25CA, 0x2329, 0xF8E8, 0xF8E9, 0xF8EA, 0x2211
};
const BEncodingRun		AdobeSymbol_00A0(0x00A0, 0x00E5, AdobeSymbolBlock_00A0);

const BEncodingRun		AdobeSymbol_00E6(0x00E6, 0x00EF, 0xF8EB);

const uint16	AdobeSymbolBlock_00F1[] = {
0x232A, 0x222B, 0x2320, 0xF8F5, 0x2321
};
const BEncodingRun		AdobeSymbol_00F1(0x00F1, 0x00F5, AdobeSymbolBlock_00F1);

const BEncodingRun		AdobeSymbol_00F6(0x00F6, 0x00FE, 0xF8F6);

const BEncodingRun * const AdobeSymbolStack[] = {
&AdobeSymbol_0020, &AdobeSymbol_002E, &AdobeSymbol_0040, &AdobeSymbol_0044, &AdobeSymbol_0057, &AdobeSymbol_00A0, &AdobeSymbol_00E6, &AdobeSymbol_00F1, &AdobeSymbol_00F6
};
const uint16 AdobeSymbolStackSize = 9;
// pragma mark -
const uint16	MacDingbatsBlock_0020[] = {
0x0020, 0x2701, 0x2702, 0x2703, 0x2704, 0x260E, 0x2706, 0x2707, 0x2708, 0x2709, 0x261B, 0x261E
};
const BEncodingRun		MacDingbats_0020(0x0020, 0x002B, MacDingbatsBlock_0020);

const BEncodingRun		MacDingbats_002C(0x002C, 0x006B, 0x270C);

const uint16	MacDingbatsBlock_006C[] = {
0x25CF, 0x274D, 0x25A0, 0x274F, 0x2750, 0x2751, 0x2752, 0x25B2, 0x25BC, 0x25C6, 0x2756, 0x25D7, 0x2758, 0x2759, 0x275A, 0x275B,
0x275C, 0x275D, 0x275E
};
const BEncodingRun		MacDingbats_006C(0x006C, 0x007E, MacDingbatsBlock_006C);


const uint16	MacDingbatsBlock_0080[] = {
0x0028, 0x0029, 0x0028, 0x0029, 0x3008, 0x3009, 0x2039, 0x203A, 0x3008, 0x3009, 0x3014, 0x3015, 0x007B, 0x007D
};
const BEncodingRun		MacDingbats_0080(0x0080, 0x008D, MacDingbatsBlock_0080);


const uint16	MacDingbatsBlock_00A1[] = {
0x2761, 0x2762, 0x2763, 0x2764, 0x2765, 0x2766, 0x2767, 0x2663, 0x2666, 0x2665, 0x2660
};
const BEncodingRun		MacDingbats_00A1(0x00A1, 0x00AB, MacDingbatsBlock_00A1);

const BEncodingRun		MacDingbats_00AC(0x00AC, 0x00B5, 0x2460);
const BEncodingRun		MacDingbats_00B6(0x00B6, 0x00D4, 0x2776);

const uint16	MacDingbatsBlock_00D5[] = {
0x2192, 0x2194, 0x2195
};
const BEncodingRun		MacDingbats_00D5(0x00D5, 0x00D7, MacDingbatsBlock_00D5);

const BEncodingRun		MacDingbats_00D8(0x00D8, 0x00EF, 0x2798);
const BEncodingRun		MacDingbats_00F1(0x00F1, 0x00FE, 0x27B1);

const BEncodingRun * const MacDingbatsStack[] = {
&MacDingbats_0020, &MacDingbats_002C, &MacDingbats_006C, &MacDingbats_0080, &MacDingbats_00A1, &MacDingbats_00AC, &MacDingbats_00B6, &MacDingbats_00D5, &MacDingbats_00D8,
&MacDingbats_00F1
};
const uint16 MacDingbatsStackSize = 10;

const BReplacement	MacDingbatsReplace_0048(0x0048, 0x2605);
const BReplacement * const MacDingbatsReplacements[] = {
&MacDingbatsReplace_0048
};
const uint16 MacDingbatsReplacementCount = 1;
// pragma mark -
const uint16	MacIcelandBlock_0080[] = {
0x00C4, 0x00C5, 0x00C7, 0x00C9, 0x00D1, 0x00D6, 0x00DC, 0x00E1, 0x00E0, 0x00E2, 0x00E4, 0x00E3, 0x00E5, 0x00E7, 0x00E9, 0x00E8,
0x00EA, 0x00EB, 0x00ED, 0x00EC, 0x00EE, 0x00EF, 0x00F1, 0x00F3, 0x00F2, 0x00F4, 0x00F6, 0x00F5, 0x00FA, 0x00F9, 0x00FB, 0x00FC,
0x00DD, 0x00B0, 0x00A2, 0x00A3, 0x00A7, 0x2022, 0x00B6, 0x00DF, 0x00AE, 0x00A9, 0x2122, 0x00B4, 0x00A8, 0x2260, 0x00C6, 0x00D8,
0x221E, 0x00B1, 0x2264, 0x2265, 0x00A5, 0x00B5, 0x2202, 0x2211, 0x220F, 0x03C0, 0x222B, 0x00AA, 0x00BA, 0x03A9, 0x00E6, 0x00F8,
0x00BF, 0x00A1, 0x00AC, 0x221A, 0x0192, 0x2248, 0x2206, 0x00AB, 0x00BB, 0x2026, 0x00A0, 0x00C0, 0x00C3, 0x00D5, 0x0152, 0x0153,
0x2013, 0x2014, 0x201C, 0x201D, 0x2018, 0x2019, 0x00F7, 0x25CA, 0x00FF, 0x0178, 0x2044, 0x20AC, 0x00D0, 0x00F0, 0x00DE, 0x00FE,
0x00FD, 0x00B7, 0x201A, 0x201E, 0x2030, 0x00C2, 0x00CA, 0x00C1, 0x00CB, 0x00C8, 0x00CD, 0x00CE, 0x00CF, 0x00CC, 0x00D3, 0x00D4,
0xF8FF, 0x00D2, 0x00DA, 0x00DB, 0x00D9, 0x0131, 0x02C6, 0x02DC, 0x00AF, 0x02D8, 0x02D9, 0x02DA, 0x00B8, 0x02DD, 0x02DB, 0x02C7
};
const BEncodingRun		MacIceland_0080(0x0080, 0x00FF, MacIcelandBlock_0080);


const BEncodingRun * const MacIcelandStack[] = {
&MacIceland_0080
};
const uint16 MacIcelandStackSize = 1;
// pragma mark -
const uint16	ZapfDingbatsBlock_0020[] = {
0x0020, 0x2701, 0x2702, 0x2703, 0x2704, 0x260E, 0x2706, 0x2707, 0x2708, 0x2709, 0x261B, 0x261E
};
const BEncodingRun		ZapfDingbats_0020(0x0020, 0x002B, ZapfDingbatsBlock_0020);

const BEncodingRun		ZapfDingbats_002C(0x002C, 0x006B, 0x270C);

const uint16	ZapfDingbatsBlock_006C[] = {
0x25CF, 0x274D, 0x25A0, 0x274F, 0x2750, 0x2751, 0x2752, 0x25B2, 0x25BC, 0x25C6, 0x2756, 0x25D7, 0x2758, 0x2759, 0x275A, 0x275B,
0x275C, 0x275D, 0x275E
};
const BEncodingRun		ZapfDingbats_006C(0x006C, 0x007E, ZapfDingbatsBlock_006C);

const BEncodingRun		ZapfDingbats_0080(0x0080, 0x008D, 0xF8D7);

const uint16	ZapfDingbatsBlock_00A1[] = {
0x2761, 0x2762, 0x2763, 0x2764, 0x2765, 0x2766, 0x2767, 0x2663, 0x2666, 0x2665, 0x2660
};
const BEncodingRun		ZapfDingbats_00A1(0x00A1, 0x00AB, ZapfDingbatsBlock_00A1);

const BEncodingRun		ZapfDingbats_00AC(0x00AC, 0x00B5, 0x2460);
const BEncodingRun		ZapfDingbats_00B6(0x00B6, 0x00D4, 0x2776);

const uint16	ZapfDingbatsBlock_00D5[] = {
0x2192, 0x2194, 0x2195
};
const BEncodingRun		ZapfDingbats_00D5(0x00D5, 0x00D7, ZapfDingbatsBlock_00D5);

const BEncodingRun		ZapfDingbats_00D8(0x00D8, 0x00EF, 0x2798);
const BEncodingRun		ZapfDingbats_00F1(0x00F1, 0x00FE, 0x27B1);

const BEncodingRun * const ZapfDingbatsStack[] = {
&ZapfDingbats_0020, &ZapfDingbats_002C, &ZapfDingbats_006C, &ZapfDingbats_0080, &ZapfDingbats_00A1, &ZapfDingbats_00AC, &ZapfDingbats_00B6, &ZapfDingbats_00D5, &ZapfDingbats_00D8,
&ZapfDingbats_00F1
};
const uint16 ZapfDingbatsStackSize = 10;

const BReplacement	ZapfDingbatsReplace_0048(0x0048, 0x2605);
const BReplacement * const ZapfDingbatsReplacements[] = {
&ZapfDingbatsReplace_0048
};
const uint16 ZapfDingbatsReplacementCount = 1;

// pragma mark -
BTextCodec * make_codec(const char * encoding, BTextEncodingAddOn *addOn) {
	if (strcmp(encoding, ISO10Name) == 0)
		return new BTextCodec(ISO10Stack, ISO10StackSize, NULL, 0, addOn, USES_ASCII);

	else if (strcmp(encoding,CP1258Name) == 0)
		return new BTextCodec(CP1258Stack, CP1258StackSize, CP1258Replacements, CP1258ReplacementCount, addOn, USES_ASCII);
	
	else if (strcmp(encoding,CP861Name) == 0)
		return new BTextCodec(CP861Stack, CP861StackSize, NULL, 0, addOn, USES_ASCII);
	
	else if (strcmp(encoding,CP863Name) == 0)
		return new BTextCodec(CP863Stack, CP863StackSize, NULL, 0, addOn, USES_ASCII);
	
	else if (strcmp(encoding,CP865Name) == 0)
		return new BTextCodec(CP865Stack, CP865StackSize, NULL, 0, addOn, USES_ASCII);
	
	else if (strcmp(encoding,CP874Name) == 0)
		return new BTextCodec(CP874Stack, CP874StackSize, CP874Replacements, CP874ReplacementCount, addOn, USES_ASCII);
	
	else if (strcmp(encoding, ISO14Name) == 0)
		return new BTextCodec(ISO14Stack, ISO14StackSize, NULL, 0, addOn, USES_ASCII);
	
	else if (strcmp(encoding, ISO4Name) == 0)
		return new BTextCodec(ISO4Stack, ISO4StackSize, NULL, 0, addOn, USES_ASCII);
	
	else if (strcmp(encoding,AdobeSymbolName) == 0)
		return new BTextCodec(AdobeSymbolStack, AdobeSymbolStackSize, NULL, 0, addOn);
	
	else if (strcmp(encoding,MacDingbatsName) == 0)
		return new BTextCodec(MacDingbatsStack, MacDingbatsStackSize, MacDingbatsReplacements, MacDingbatsReplacementCount, addOn);
	
	else if (strcmp(encoding,MacIcelandName) == 0)
		return new BTextCodec(MacIcelandStack, MacIcelandStackSize, NULL, 0, addOn, USES_ASCII);
	
	else if (strcmp(encoding,ZapfDingbatsName) == 0)
		return new BTextCodec(ZapfDingbatsStack, ZapfDingbatsStackSize, ZapfDingbatsReplacements, ZapfDingbatsReplacementCount, addOn);
	
	else
		return NULL;
}

