//////////////////////////////////////////////////////////////////////////////
// Hardware-Specific Macros
//    This file contains the definitions of macros used by the generic
// skeleton that are hardware-specific.
//
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
// Function Prototypes ( defined in r128_2d.c )///////////////////////////////
//////////////////////////////////////////////////////////////////////////////
void   r128_WaitForIdle(void) ;
void   r128_WaitForFifo(uint32 entries) ; 
void   r128_FlushPixelCache(void);
void   r128_ResetEngine(void);
void   r128_InitEngine(SHARED_INFO *si );
uint32  r128_GetBBPValue ( uint32 bppvalue );
uint32  r128_CalcPitch(SHARED_INFO * si, uint32 RoundTo);
uint32 r128_GetColourCode(uint32 color);
void R128_DrawLine (SHARED_INFO *si, uint16 x1, uint16 y1, 
		uint16 x2, uint16 y2, uint32 colour, int32 bppvalue);
void fill_a_rectangle(engine_token *et, uint32 colorIndex, 
		fill_rect_params *list, uint32 count, uint32 rop3_code);

//////////////////////////////////////////////////////////////////////////////
// Macros ////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// Calculate Storage Bits Per Pixel
//    Utility function to calculate the number of storage bits per pixel
// given a colour space.
//    HACK - Move this into a utility file.
uint32 CalcBitsPerPixel(uint32 cs);

//////////////////////////////////////////////////////////////////////////////
// Syncronization Macros


// This macro should return a nonzero value if the 2D drawing engine is
// busy.

// The "engine" is always idle.
#define ENGINE_2D_ACTIVE (0)


//////////////////////////////////////////////////////////////////////////////
// This Is The End Of The File ///////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
