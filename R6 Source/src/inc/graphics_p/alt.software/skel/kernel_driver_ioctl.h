//////////////////////////////////////////////////////////////////////////////
// Kernel Driver IOCTL Constants and Structures
//
//    IOCTL calls are used a fair bit for communication between the accelerant
// and the kernel driver. This header defines constants and data structures
// used for these calls.
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// Macros ////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// This is a magic value passed with IOCTL requests. The kernel driver checks
// the value to make sure that the request is legitimate and from a compatible
// version of the accelerant.

#define GDS_IOCTL_MAGIC  0x0003


//////////////////////////////////////////////////////////////////////////////
// Typedefs //////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// IOCTL Opcodes

enum
{
  GDS_GET_PRIVATE_DATA = B_DEVICE_OP_CODES_END + 1,
  GDS_GET_PCI,
  GDS_SET_PCI,
  GDS_RUN_INTERRUPTS,

  // This is the first opcode value available for hardware-specific use.
  GDS_FIRST_HARDWARE_SPECIFIC_OPCODE
};


//////////////////////////////////////////////////////////////////////////////
// IOCTL Data Structures
//    These are passed as arguments for some of the IOCTL calls.

//////////////////////////////////////////////////////////////////////////////
// GDS Get Set PCI
//    This is used for requests to read from or write to the PCI configuration
// registers associated with this accelerant's device.

typedef struct
{
  uint32 magic;         // magic number indicating a compatible accelerant
  uint32 offset;
  uint32 size;
  uint32 value;
} gds_get_set_pci;


//////////////////////////////////////////////////////////////////////////////
// GDS Set Boolean State
//    This is used for various requests that act on a boolean value.

typedef struct
{
  uint32 magic;         // magic number indicating a compatible accelerant
  bool do_it;
} gds_set_bool_state;


//////////////////////////////////////////////////////////////////////////////
// GDS Get Private Data
//    This is used to return a pointer to the SHARED_INFO structure containing
// information for this accelerant's device.

typedef struct
{
  uint32 magic;         // magic number indicating a compatible accelerant
  SHARED_INFO *si;
} gds_get_private_data;


//////////////////////////////////////////////////////////////////////////////
// This Is The End Of The File ///////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
