
#include <textencoding/BTextEncoding.h>
#include <textencoding/TextEncodingNames.h>
#include <add-ons/textencoding/BTextCodec.h>
#include <add-ons/textencoding/BEncodingRun.h>
#include <string.h>

using namespace B::TextEncoding;

const uint16	CP1251Block_0080[] = {
0x0402, 0x0403, 0x201A, 0x0453, 0x201E, 0x2026, 0x2020, 0x2021, 0x20AC, 0x2030, 0x0409, 0x2039, 0x040A, 0x040C, 0x040B, 0x040F,
0x0452, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014, 0xFFFF, 0x2122, 0x0459, 0x203A, 0x045A, 0x045C, 0x045B, 0x045F,
0x00A0, 0x040E, 0x045E, 0x0408, 0x00A4, 0x0490, 0x00A6, 0x00A7, 0x0401, 0x00A9, 0x0404, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x0407,
0x00B0, 0x00B1, 0x0406, 0x0456, 0x0491, 0x00B5, 0x00B6, 0x00B7, 0x0451, 0x2116, 0x0454, 0x00BB, 0x0458, 0x0405, 0x0455, 0x0457
};
const BEncodingRun		CP1251_0080(0x0080, 0x00BF, CP1251Block_0080);

const BEncodingRun		CP1251_00C0(0x00C0, 0x00FF, 0x0410);

const BEncodingRun * const CP1251Stack[] = {
&CP1251_0080, &CP1251_00C0
};
const uint16 CP1251StackSize = 2;

// pragma mark -

const uint16	CP1257Block_0080[] = {
0x20AC, 0xFFFF, 0x201A, 0xFFFF, 0x201E, 0x2026, 0x2020, 0x2021
};
const BEncodingRun		CP1257_0080(0x0080, 0x0087, CP1257Block_0080);


const uint16	CP1257Block_008D[] = {
0x00A8, 0x02C7, 0x00B8, 0xFFFF, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014
};
const BEncodingRun		CP1257_008D(0x008D, 0x0097, CP1257Block_008D);


const uint16	CP1257Block_00A0[] = {
0x00A0, 0xFFFF, 0x00A2, 0x00A3, 0x00A4, 0xFFFF, 0x00A6, 0x00A7, 0x00D8, 0x00A9, 0x0156, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00C6,
0x00B0, 0x00B1, 0x00B2, 0x00B3, 0x00B4, 0x00B5, 0x00B6, 0x00B7, 0x00F8, 0x00B9, 0x0157, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00E6,
0x0104, 0x012E, 0x0100, 0x0106, 0x00C4, 0x00C5, 0x0118, 0x0112, 0x010C, 0x00C9, 0x0179, 0x0116, 0x0122, 0x0136, 0x012A, 0x013B,
0x0160, 0x0143, 0x0145, 0x00D3, 0x014C, 0x00D5, 0x00D6, 0x00D7, 0x0172, 0x0141, 0x015A, 0x016A, 0x00DC, 0x017B, 0x017D, 0x00DF,
0x0105, 0x012F, 0x0101, 0x0107, 0x00E4, 0x00E5, 0x0119, 0x0113, 0x010D, 0x00E9, 0x017A, 0x0117, 0x0123, 0x0137, 0x012B, 0x013C,
0x0161, 0x0144, 0x0146, 0x00F3, 0x014D, 0x00F5, 0x00F6, 0x00F7, 0x0173, 0x0142, 0x015B, 0x016B, 0x00FC, 0x017C, 0x017E, 0x02D9
};
const BEncodingRun		CP1257_00A0(0x00A0, 0x00FF, CP1257Block_00A0);


const BEncodingRun * const CP1257Stack[] = {
&CP1257_0080, &CP1257_008D, &CP1257_00A0
};
const uint16 CP1257StackSize = 3;

const BReplacement	CP1257Replace_0089(0x0089, 0x2030);
const BReplacement	CP1257Replace_008B(0x008B, 0x2039);
const BReplacement	CP1257Replace_0099(0x0099, 0x2122);
const BReplacement	CP1257Replace_009B(0x009B, 0x203A);
const BReplacement	CP1257Replace_009D(0x009D, 0x00AF);
const BReplacement	CP1257Replace_009E(0x009E, 0x02DB);

const BReplacement * const CP1257Replacements[] = {
&CP1257Replace_0089, &CP1257Replace_008B, &CP1257Replace_0099, &CP1257Replace_009B, &CP1257Replace_009D, &CP1257Replace_009E
};
const uint16 CP1257ReplacementCount = 6;

// pragma mark -
const uint16	CP775Block_0080[] = {
0x0106, 0x00FC, 0x00E9, 0x0101, 0x00E4, 0x0123, 0x00E5, 0x0107, 0x0142, 0x0113, 0x0156, 0x0157, 0x012B, 0x0179, 0x00C4, 0x00C5,
0x00C9, 0x00E6, 0x00C6, 0x014D, 0x00F6, 0x0122, 0x00A2, 0x015A, 0x015B, 0x00D6, 0x00DC, 0x00F8, 0x00A3, 0x00D8, 0x00D7, 0x00A4,
0x0100, 0x012A, 0x00F3, 0x017B, 0x017C, 0x017A, 0x201D, 0x00A6, 0x00A9, 0x00AE, 0x00AC, 0x00BD, 0x00BC, 0x0141, 0x00AB, 0x00BB,
0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x0104, 0x010C, 0x0118, 0x0116, 0x2563, 0x2551, 0x2557, 0x255D, 0x012E, 0x0160, 0x2510,
0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x0172, 0x016A, 0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x017D,
0x0105, 0x010D, 0x0119, 0x0117, 0x012F, 0x0161, 0x0173, 0x016B, 0x017E, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,
0x00D3, 0x00DF, 0x014C, 0x0143, 0x00F5, 0x00D5, 0x00B5, 0x0144, 0x0136, 0x0137, 0x013B, 0x013C, 0x0146, 0x0112, 0x0145, 0x2019,
0x00AD, 0x00B1, 0x201C, 0x00BE, 0x00B6, 0x00A7, 0x00F7, 0x201E, 0x00B0, 0x2219, 0x00B7, 0x00B9, 0x00B3, 0x00B2, 0x25A0, 0x00A0
};
const BEncodingRun		CP775_0080(0x0080, 0x00FF, CP775Block_0080);


const BEncodingRun * const CP775Stack[] = {
&CP775_0080
};
const uint16 CP775StackSize = 1;

// pragma mark -
const uint16	CP855Block_0080[] = {
0x0452, 0x0402, 0x0453, 0x0403, 0x0451, 0x0401, 0x0454, 0x0404, 0x0455, 0x0405, 0x0456, 0x0406, 0x0457, 0x0407, 0x0458, 0x0408,
0x0459, 0x0409, 0x045A, 0x040A, 0x045B, 0x040B, 0x045C, 0x040C, 0x045E, 0x040E, 0x045F, 0x040F, 0x044E, 0x042E, 0x044A, 0x042A,
0x0430, 0x0410, 0x0431, 0x0411, 0x0446, 0x0426, 0x0434, 0x0414, 0x0435, 0x0415, 0x0444, 0x0424, 0x0433, 0x0413, 0x00AB, 0x00BB,
0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x0445, 0x0425, 0x0438, 0x0418, 0x2563, 0x2551, 0x2557, 0x255D, 0x0439, 0x0419, 0x2510,
0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x043A, 0x041A, 0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x00A4,
0x043B, 0x041B, 0x043C, 0x041C, 0x043D, 0x041D, 0x043E, 0x041E, 0x043F, 0x2518, 0x250C, 0x2588, 0x2584, 0x041F, 0x044F, 0x2580,
0x042F, 0x0440, 0x0420, 0x0441, 0x0421, 0x0442, 0x0422, 0x0443, 0x0423, 0x0436, 0x0416, 0x0432, 0x0412, 0x044C, 0x042C, 0x2116,
0x00AD, 0x044B, 0x042B, 0x0437, 0x0417, 0x0448, 0x0428, 0x044D, 0x042D, 0x0449, 0x0429, 0x0447, 0x0427, 0x00A7, 0x25A0, 0x00A0
};
const BEncodingRun		CP855_0080(0x0080, 0x00FF, CP855Block_0080);


const BEncodingRun * const CP855Stack[] = {
&CP855_0080
};
const uint16 CP855StackSize = 1;

// pragma mark -
const BEncodingRun		CP866_0080(0x0080, 0x00AF, 0x0410);

const uint16	CP866Block_00B0[] = {
0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556, 0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,
0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F, 0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,
0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B, 0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580
};
const BEncodingRun		CP866_00B0(0x00B0, 0x00DF, CP866Block_00B0);

const BEncodingRun		CP866_00E0(0x00E0, 0x00EF, 0x0440);

const uint16	CP866Block_00F0[] = {
0x0401, 0x0451, 0x0404, 0x0454, 0x0407, 0x0457, 0x040E, 0x045E, 0x00B0, 0x2219, 0x00B7, 0x221A, 0x2116, 0x00A4, 0x25A0, 0x00A0
};
const BEncodingRun		CP866_00F0(0x00F0, 0x00FF, CP866Block_00F0);


const BEncodingRun * const CP866Stack[] = {
&CP866_0080, &CP866_00B0, &CP866_00E0, &CP866_00F0
};
const uint16 CP866StackSize = 4;
// pragma mark -
const BEncodingRun		ISO13_0080(0x0080, 0x00A0, 0x0080);

const uint16	ISO13Block_00A1[] = {
0x201D, 0x00A2, 0x00A3, 0x00A4, 0x201E, 0x00A6, 0x00A7, 0x00D8, 0x00A9, 0x0156, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x00C6, 0x00B0,
0x00B1, 0x00B2, 0x00B3, 0x201C, 0x00B5, 0x00B6, 0x00B7, 0x00F8, 0x00B9, 0x0157, 0x00BB, 0x00BC, 0x00BD, 0x00BE, 0x00E6, 0x0104,
0x012E, 0x0100, 0x0106, 0x00C4, 0x00C5, 0x0118, 0x0112, 0x010C, 0x00C9, 0x0179, 0x0116, 0x0122, 0x0136, 0x012A, 0x013B, 0x0160,
0x0143, 0x0145, 0x00D3, 0x014C, 0x00D5, 0x00D6, 0x00D7, 0x0172, 0x0141, 0x015A, 0x016A, 0x00DC, 0x017B, 0x017D, 0x00DF, 0x0105,
0x012F, 0x0101, 0x0107, 0x00E4, 0x00E5, 0x0119, 0x0113, 0x010D, 0x00E9, 0x017A, 0x0117, 0x0123, 0x0137, 0x012B, 0x013C, 0x0161,
0x0144, 0x0146, 0x00F3, 0x014D, 0x00F5, 0x00F6, 0x00F7, 0x0173, 0x0142, 0x015B, 0x016B, 0x00FC, 0x017C, 0x017E, 0x2019
};
const BEncodingRun		ISO13_00A1(0x00A1, 0x00FF, ISO13Block_00A1);


const BEncodingRun * const ISO13Stack[] = {
&ISO13_0080, &ISO13_00A1
};
const uint16 ISO13StackSize = 2;

// pragma mark -
const BEncodingRun		ISO5_0080(0x0080, 0x00A0, 0x0080);
const BEncodingRun		ISO5_00A1(0x00A1, 0x00FC, 0x0401);

const uint16	ISO5Block_00FD[] = {
0x00A7, 0x045E, 0x045F
};
const BEncodingRun		ISO5_00FD(0x00FD, 0x00FF, ISO5Block_00FD);


const BEncodingRun * const ISO5Stack[] = {
&ISO5_0080, &ISO5_00A1, &ISO5_00FD
};
const uint16 ISO5StackSize = 3;

const BReplacement	ISO5Replace_00AD(0x00AD, 0x00AD);
const BReplacement	ISO5Replace_00F0(0x00F0, 0x2116);
const BReplacement * const ISO5Replacements[] = {
&ISO5Replace_00AD, &ISO5Replace_00F0
};
const uint16 ISO5ReplacementCount = 2;

// pragma mark -
const uint16	KOI8RBlock_0080[] = {
0x2500, 0x2502, 0x250C, 0x2510, 0x2514, 0x2518, 0x251C, 0x2524, 0x252C, 0x2534, 0x253C, 0x2580, 0x2584, 0x2588, 0x258C, 0x2590,
0x2591, 0x2592, 0x2593, 0x2320, 0x25A0, 0x2219, 0x221A, 0x2248, 0x2264, 0x2265, 0x00A0, 0x2321, 0x00B0, 0x00B2, 0x00B7, 0x00F7,
0x2550, 0x2551, 0x2552, 0x0451
};
const BEncodingRun		KOI8R_0080(0x0080, 0x00A3, KOI8RBlock_0080);

const BEncodingRun		KOI8R_00A4(0x00A4, 0x00BE, 0x2553);

const uint16	KOI8RBlock_00BF[] = {
0x00A9, 0x044E, 0x0430, 0x0431, 0x0446, 0x0434, 0x0435, 0x0444, 0x0433, 0x0445
};
const BEncodingRun		KOI8R_00BF(0x00BF, 0x00C8, KOI8RBlock_00BF);

const BEncodingRun		KOI8R_00C9(0x00C9, 0x00D0, 0x0438);

const uint16	KOI8RBlock_00D1[] = {
0x044F, 0x0440, 0x0441, 0x0442, 0x0443, 0x0436, 0x0432, 0x044C, 0x044B, 0x0437, 0x0448, 0x044D, 0x0449, 0x0447, 0x044A, 0x042E,
0x0410, 0x0411, 0x0426, 0x0414, 0x0415, 0x0424, 0x0413, 0x0425
};
const BEncodingRun		KOI8R_00D1(0x00D1, 0x00E8, KOI8RBlock_00D1);

const BEncodingRun		KOI8R_00E9(0x00E9, 0x00F0, 0x0418);

const uint16	KOI8RBlock_00F1[] = {
0x042F, 0x0420, 0x0421, 0x0422, 0x0423, 0x0416, 0x0412, 0x042C, 0x042B, 0x0417, 0x0428, 0x042D, 0x0429, 0x0427, 0x042A
};
const BEncodingRun		KOI8R_00F1(0x00F1, 0x00FF, KOI8RBlock_00F1);


const BEncodingRun * const KOI8RStack[] = {
&KOI8R_0080, &KOI8R_00A4, &KOI8R_00BF, &KOI8R_00C9, &KOI8R_00D1, &KOI8R_00E9, &KOI8R_00F1
};
const uint16 KOI8RStackSize = 7;

const BReplacement	KOI8RReplace_00B3(0x00B3, 0x0401);
const BReplacement * const KOI8RReplacements[] = {
&KOI8RReplace_00B3
};
const uint16 KOI8RReplacementCount = 1;

// pragma mark -

const uint16	MacCroatianBlock_0080[] = {
0x00C4, 0x00C5, 0x00C7, 0x00C9, 0x00D1, 0x00D6, 0x00DC, 0x00E1, 0x00E0, 0x00E2, 0x00E4, 0x00E3, 0x00E5, 0x00E7, 0x00E9, 0x00E8,
0x00EA, 0x00EB, 0x00ED, 0x00EC, 0x00EE, 0x00EF, 0x00F1, 0x00F3, 0x00F2, 0x00F4, 0x00F6, 0x00F5, 0x00FA, 0x00F9, 0x00FB, 0x00FC,
0x2020, 0x00B0, 0x00A2, 0x00A3, 0x00A7, 0x2022, 0x00B6, 0x00DF, 0x00AE, 0x0160, 0x2122, 0x00B4, 0x00A8, 0x2260, 0x017D, 0x00D8,
0x221E, 0x00B1, 0x2264, 0x2265, 0x2206, 0x00B5, 0x2202, 0x2211, 0x220F, 0x0161, 0x222B, 0x00AA, 0x00BA, 0x03A9, 0x017E, 0x00F8,
0x00BF, 0x00A1, 0x00AC, 0x221A, 0x0192, 0x2248, 0x0106, 0x00AB, 0x010C, 0x2026, 0x00A0, 0x00C0, 0x00C3, 0x00D5, 0x0152, 0x0153,
0x0110, 0x2014, 0x201C, 0x201D, 0x2018, 0x2019, 0x00F7, 0x25CA, 0xF8FF, 0x00A9, 0x2044, 0x20AC, 0x2039, 0x203A, 0x00C6, 0x00BB,
0x2013, 0x00B7, 0x201A, 0x201E, 0x2030, 0x00C2, 0x0107, 0x00C1, 0x010D, 0x00C8, 0x00CD, 0x00CE, 0x00CF, 0x00CC, 0x00D3, 0x00D4,
0x0111, 0x00D2, 0x00DA, 0x00DB, 0x00D9, 0x0131, 0x02C6, 0x02DC, 0x00AF, 0x03C0, 0x00CB, 0x02DA, 0x00B8, 0x00CA, 0x00E6, 0x02C7
};
const BEncodingRun		MacCroatian_0080(0x0080, 0x00FF, MacCroatianBlock_0080);


const BEncodingRun * const MacCroatianStack[] = {
&MacCroatian_0080
};
const uint16 MacCroatianStackSize = 1;
// pragma mark -

const BEncodingRun		MacCyrillic_0080(0x0080, 0x009F, 0x0410);

const uint16	MacCyrillicBlock_00A0[] = {
0x2020, 0x00B0, 0x0490, 0x00A3, 0x00A7, 0x2022, 0x00B6, 0x0406, 0x00AE, 0x00A9, 0x2122, 0x0402, 0x0452, 0x2260, 0x0403, 0x0453,
0x221E, 0x00B1, 0x2264, 0x2265, 0x0456, 0x00B5, 0x0491, 0x0408, 0x0404, 0x0454, 0x0407, 0x0457, 0x0409, 0x0459, 0x040A, 0x045A,
0x0458, 0x0405, 0x00AC, 0x221A, 0x0192, 0x2248, 0x2206, 0x00AB, 0x00BB, 0x2026, 0x00A0, 0x040B, 0x045B, 0x040C, 0x045C, 0x0455,
0x2013, 0x2014, 0x201C, 0x201D, 0x2018, 0x2019, 0x00F7, 0x201E, 0x040E, 0x045E, 0x040F, 0x045F, 0x2116, 0x0401, 0x0451, 0x044F
};
const BEncodingRun		MacCyrillic_00A0(0x00A0, 0x00DF, MacCyrillicBlock_00A0);

const BEncodingRun		MacCyrillic_00E0(0x00E0, 0x00FE, 0x0430);

const BEncodingRun * const MacCyrillicStack[] = {
&MacCyrillic_0080, &MacCyrillic_00A0, &MacCyrillic_00E0
};
const uint16 MacCyrillicStackSize = 3;

const BReplacement	MacCyrillicReplace_00FF(0x00FF, 0x20AC);
const BReplacement * const MacCyrillicReplacements[] = {
&MacCyrillicReplace_00FF
};
const uint16 MacCyrillicReplacementCount = 1;


// pragma mark -
BTextCodec * make_codec(const char * encoding, BTextEncodingAddOn *addOn) {
	if (strcasecmp(encoding, CP1251Name) == 0)
		return new BTextCodec(CP1251Stack, CP1251StackSize, NULL, 0, addOn, USES_ASCII);

	else if (strcasecmp(encoding,CP1257Name) == 0)
		return new BTextCodec(CP1257Stack, CP1257StackSize, CP1257Replacements, CP1257ReplacementCount, addOn, USES_ASCII);

	else if (strcasecmp(encoding,CP775Name) == 0)
		return new BTextCodec(CP775Stack, CP775StackSize, NULL, 0, addOn, USES_ASCII);

	else if (strcasecmp(encoding,CP855Name) == 0)
		return new BTextCodec(CP855Stack, CP855StackSize, NULL, 0, addOn, USES_ASCII);

	else if (strcasecmp(encoding,CP866Name) == 0)
		return new BTextCodec(CP866Stack, CP866StackSize, NULL, 0, addOn, USES_ASCII);

	else if (strcasecmp(encoding, ISO13Name) == 0)
		return new BTextCodec(ISO13Stack, ISO13StackSize, NULL, 0, addOn, USES_ASCII);

	else if (strcasecmp(encoding, ISO5Name) == 0)
		return new BTextCodec(ISO5Stack, ISO5StackSize, ISO5Replacements, ISO5ReplacementCount, addOn, USES_ASCII);

	else if (strcasecmp(encoding,KOI8RName) == 0)
		return new BTextCodec(KOI8RStack, KOI8RStackSize, KOI8RReplacements, KOI8RReplacementCount, addOn, USES_ASCII);

	else if (strcasecmp(encoding,MacCroatianName) == 0)
		return new BTextCodec(MacCroatianStack, MacCroatianStackSize, NULL, 0, addOn, USES_ASCII);

	else if (strcasecmp(encoding,MacCyrillicName) == 0)
		return new BTextCodec(MacCyrillicStack, MacCyrillicStackSize, MacCyrillicReplacements, MacCyrillicReplacementCount, addOn, USES_ASCII);
	else
		return NULL;
}

