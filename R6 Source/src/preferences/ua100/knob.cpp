#include <Window.h>
#include <Bitmap.h>
#include <math.h>

#include "knob.h"

#define NOTCH_RADIUS 2
#define MIN_DOT BPoint(KNOB_CENTER_X - 10, KNOB_CENTER_Y + 10)
#define MAX_DOT BPoint(KNOB_CENTER_X + 10, KNOB_CENTER_Y + 10)
#define CENTER_DOT BPoint(KNOB_CENTER_X, 0)

const uint8 knobBits[] = {
  0x15,0x15,0x15,0x16,0x15,0x15,0x15,0x16,
  0x15,0x15,0x15,0x16,0x0,0x0,0x0,0x0,
  0x0,0x0,0x0,0x15,0x15,0x15,0x16,0x15,
  0x15,0x15,0x16,0x15,0x15,0x15,0x16,0x15,
  0x15,0x15,0x15,0x15,0x15,0x16,0x15,0x15,
  0x15,0x16,0x15,0x15,0x15,0x16,0x0,0x0,
  0x18,0x3f,0x18,0x18,0x18,0x18,0x18,0x0,
  0x0,0x15,0x15,0x15,0x16,0x15,0x15,0x15,
  0x16,0x15,0x15,0x15,0x16,0x15,0x15,0x15,
  0x15,0x15,0x15,0x16,0x15,0x15,0x15,0x16,
  0x15,0x0,0x3f,0x18,0x3f,0x18,0x3f,0x18,
  0x18,0x18,0x18,0x18,0x18,
  0x0,0x15,0x15,0x15,0x16,0x15,0x15,0x15,
  0x16,0x15,0x15,0x15,0x3f,0x3f,0x3f,0x16,
  0x15,0x15,0x15,0x16,0x15,0x15,0x15,0x0,
  0x3f,0x18,0x3f,0x18,0x3f,0x18,0x18,0x18,
  0x18,0x18,0x18,0x18,0x18,0x0,0x15,0x15,
  0x15,0x16,0x15,0x15,0x15,0x16,0x15,0x15,
  0x3f,0x3f,0x3f,0x15,0x16,0x15,0x15,0x15,
  0x16,0x15,0x0,0x3f,0x18,0x3f,0x18,0x3f,
  0x18,0x3f,0x18,0x18,0x18,0x18,0x18,0x18,
  0x18,0x3f,0x0,0x15,0x15,0x15,0x16,0x15,
  0x15,0x15,0x16,0x15,0x3f,0x3f,0x3f,0x15,
  0x15,0x16,0x15,
  0x15,0x15,0x0,0x3f,0x3f,0x3f,0x18,0x3f,
  0x18,0x3f,0x18,0x18,0x18,0x18,0x18,0x18,
  0x18,0x3f,0x18,0x3f,0x0,0x15,0x15,0x15,
  0x16,0x15,0x15,0x15,0x16,0x3f,0x3f,0x3f,
  0x15,0x15,0x15,0x16,0x15,0x15,0x0,0x3f,
  0x3f,0x3f,0x3f,0x18,0x3f,0x18,0x3f,0x18,
  0x18,0x18,0x18,0x18,0x3f,0x18,0x3f,0x18,
  0x0,0xe,0x16,0x15,0x15,0x15,0x16,0x15,
  0x15,0x3f,0x3f,0x3f,0x15,0x16,0x15,0x15,
  0x15,0x0,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,
  0x18,0x3f,0x18,0x18,0x18,0x18,0x18,0x3f,
  0x18,0x3f,0x18,
  0x3f,0x18,0x0,0xe,0x16,0x15,0x15,0x15,
  0x16,0x15,0x3f,0x3f,0x3f,0x15,0x15,0x16,
  0x15,0x15,0x0,0x3f,0x3f,0x3f,0x3f,0x3f,
  0x3f,0x3f,0x18,0x3f,0x18,0x18,0x18,0x3f,
  0x18,0x3f,0x18,0x3f,0x18,0x3f,0x0,0x6,
  0xf,0x15,0x15,0x16,0x15,0x15,0x3f,0x3f,
  0x3f,0x15,0x16,0x15,0x15,0x15,0x0,0x3f,
  0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x18,
  0x18,0x18,0x3f,0x18,0x3f,0x18,0x3f,0x18,
  0x3f,0x18,0x0,0x6,0xb,0x15,0x15,0x15,
  0x16,0x15,0x3f,0x3f,0x3f,0x15,0x15,0x16,
  0x15,0x15,0x0,0x3f,
  0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,
  0x18,0x3f,0x18,0x3f,0x18,0x3f,0x18,0x3f,
  0x18,0x3f,0x0,0x6,0xb,0xe,0x16,0x15,
  0x15,0x15,0x3f,0x3f,0x3f,0x16,0x15,0x15,
  0x15,0x16,0x0,0x18,0x3f,0x18,0x3f,0x18,
  0x3f,0x18,0x3f,0x18,0x3f,0x3f,0x3f,0x3f,
  0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x0,0x6,
  0xb,0xe,0x16,0x15,0x15,0x15,0x3f,0x3f,
  0x3f,0x16,0x15,0x15,0x15,0x16,0x0,0x3f,
  0x18,0x3f,0x18,0x3f,0x18,0x3f,0x18,0x18,
  0x18,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,
  0x3f,0x3f,0x0,0x6,0xb,
  0xe,0x16,0x15,0x15,0x15,0x3f,0x3f,0x3f,
  0x16,0x15,0x15,0x15,0x16,0x0,0x18,0x3f,
  0x18,0x3f,0x18,0x3f,0x18,0x18,0x18,0x3f,
  0x18,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,0x3f,
  0x3f,0x0,0x6,0xb,0xe,0x16,0x15,0x15,
  0x15,0x3f,0x3f,0x3f,0x16,0x15,0x15,0x15,
  0x16,0x15,0x0,0x18,0x3f,0x18,0x3f,0x18,
  0x18,0x18,0x18,0x18,0x3f,0x18,0x3f,0x3f,
  0x3f,0x3f,0x3f,0x3f,0x0,0x6,0xb,0xe,
  0xf,0x16,0x15,0x15,0x15,0x3f,0x3f,0x3f,
  0x16,0x15,0x15,0x15,0x16,0x15,0x0,0x3f,
  0x18,0x3f,0x18,0x18,0x18,
  0x18,0x18,0x3f,0x18,0x3f,0x18,0x3f,0x3f,
  0x3f,0x3f,0x3f,0x0,0x6,0xb,0xe,0xf,
  0x16,0x15,0x15,0x15,0x3f,0x3f,0x3f,0x16,
  0x15,0x15,0x15,0x16,0x15,0x15,0x0,0x3f,
  0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x3f,
  0x18,0x3f,0x18,0x3f,0x3f,0x3f,0x0,0x6,
  0xb,0xe,0xf,0xf,0x15,0x16,0x15,0x15,
  0x3f,0x3f,0x3f,0x0,0x15,0x16,0x15,0x15,
  0x15,0x16,0x15,0x0,0x18,0x18,0x18,0x18,
  0x18,0x18,0x3f,0x18,0x3f,0x18,0x3f,0x18,
  0x3f,0x0,0x6,0x6,0xb,0xf,0xf,0x15,
  0x0,0x0,0x0,0x0,0x3f,0x3f,0x3f,
  0x0,0x15,0x15,0x16,0x15,0x15,0x15,0x16,
  0x15,0x0,0x18,0x18,0x18,0x18,0x18,0x18,
  0x3f,0x18,0x3f,0x18,0x3f,0x0,0x6,0x6,
  0xb,0xf,0xf,0xf,0x15,0x0,0x15,0x15,
  0x0,0x3f,0x3f,0x3f,0x0,0x16,0x15,0x15,
  0x15,0x16,0x15,0x15,0x15,0x16,0x0,0x0,
  0x18,0x18,0x18,0x3f,0x18,0x3f,0x18,0x0,
  0x0,0x6,0x6,0xb,0xf,0xf,0xf,0x15,
  0x15,0x0,0x0,0x0,0x0,0x3f,0x3f,0x3f,
  0x0,0x15,0x16,0x15,0x15,0x15,0x16,0x15,
  0x15,0x15,0x16,0xe,0x0,0x0,0x0,0x0,
  0x0,0x0,0x0,0x7,0x6,0xb,0xa,0xf,
  0xf,0xf,0x15,
  0x16,0x15,0x0,0x15,0x0,0x15,0x3f,0x3f,
  0x3f,0x0,0x0,0x0,0x16,0x15,0x15,0x15,
  0x16,0x15,0x15,0x15,0x16,0xe,0x7,0x6,
  0x7,0x6,0x6,0x7,0xa,0xb,0xf,0xf,
  0xf,0xe,0x16,0x15,0x15,0x15,0x0,0x16,
  0x15,0x0,0x3f,0x3f,0x3f,0x15,0x15,0x16,
  0x15,0x15,0x15,0x16,0x15,0x15,0x15,0x16,
  0x15,0x15,0xf,0xb,0xa,0xb,0xb,0xa,
  0xf,0xf,0xf,0xf,0xf,0x15,0x15,0x15,
  0x16,0x15,0x15,0x15,0x16,0x15,0x3f,0x3f,
  0x3f,0x15,0x15,0x16,0x15,0x15,0x15,0x16,
  0x15,0x15,0x15,0x16,0x15,0x15,0x15,0x16,
  0xe,
  0xf,0xf,0xf,0xf,0xf,0xf,0x15,0x15,
  0x15,0x16,0x15,0x15,0x15,0x16,0x15,0x15,
  0x15,0x3f,0x3f,0x3f
};

const BPoint knobNotchPts[] = {
  BPoint(10,16),
  BPoint(9,15),BPoint(8,14),BPoint(8,13),BPoint(7,12),
  BPoint(7,11),BPoint(7,10),BPoint(7,9),BPoint(7,8),
  BPoint(8,7),BPoint(8,7),BPoint(8,6),BPoint(9,5),
  BPoint(10,4),BPoint(11,3),BPoint(12,3),BPoint(13,2),
  BPoint(15,2),BPoint(15,2),BPoint(16,2),BPoint(17,2),
  BPoint(18,3),BPoint(19,3),BPoint(20,4),BPoint(21,5),
  BPoint(22,6),BPoint(22,7),BPoint(23,8),BPoint(23,9),
  BPoint(23,10),BPoint(23,11),BPoint(23,12),BPoint(22,13),
  BPoint(22,14),BPoint(21,15),BPoint(20,16)
};

#define NUM_POINTS (sizeof(knobNotchPts) / sizeof(knobNotchPts[0]))

UKnob::UKnob(BPoint where, char* name, int fd, int32 address,
			 BMessage* msg, rgb_color notchColor)
  : BControl(BRect(where, where + BPoint(KNOB_X-1, KNOB_Y-1)),
			 name, "", msg, B_FOLLOW_H_CENTER | B_FOLLOW_TOP, B_WILL_DRAW),
	UControl(this, fd, address),
	fNotchColor(notchColor)
{
  fRect = BRect(0, 0, KNOB_X-1, KNOB_Y-1);
  fBitmap = new BBitmap(fRect, B_COLOR_8_BIT);
  memcpy(fBitmap->Bits(), knobBits, fBitmap->BitsLength());

  // Setup offscreen imaging
  fBufferView = new BView(fRect, "buffered",
						  B_FOLLOW_LEFT + B_FOLLOW_TOP, B_WILL_DRAW);
  fImageBuffer = new BBitmap(fRect, B_COLOR_8_BIT, TRUE);
  fImageBuffer->AddChild(fBufferView);
  fClipRect = fRect;
  fClipRect.top += DOT_DROP;
  fClipRect.left += 3;
  fClipRect.right -= 4;
  SetValue(0);
}

UKnob::~UKnob()
{
  delete fImageBuffer;
  delete fBitmap;
}

void
UKnob::SetValue(int32 value)
{
  if (value < KNOB_MIN)
	value = KNOB_MIN;
  if (value > KNOB_MAX)
	value = KNOB_MAX;

  BControl::SetValue(value);
}

void
UKnob::MouseDown(BPoint where)
{
  uint32 buttons;
  GetMouse(&where, &buttons);
  if (buttons & B_PRIMARY_MOUSE_BUTTON)
	if (Bounds().Contains(where)) {
	  SetTracking(true);
	  SetMouseEventMask(B_POINTER_EVENTS,
						B_LOCK_WINDOW_FOCUS | B_NO_POINTER_HISTORY);
	  UKnob::MouseMoved(where, 0, NULL);
	}
}

void
UKnob::MouseMoved(BPoint where, uint32, const BMessage*)
{
  if (!IsTracking())
	return;

  BPoint d = where - KNOB_CENTER;
  float v = 0;

  if (d.x > 0)
	v = atan(d.y/d.x) / PI + 0.5;
  else if (d.x < 0)
	v = atan(d.y/d.x) / PI - 0.5;

  if (v == 0 && d.y >= 0)
	return;

  v = (v + 0.75) / 1.5;
  if (v < 0)
	v = 0;
  if (v > 1)
	v = 1;

  int32 val = KNOB_MIN + (int32) (0.5 + (KNOB_MAX - KNOB_MIN) * v);
  int32 change = val - Value();
  if (change < 0)
	change = -change;
  if (change <= (KNOB_MAX - KNOB_MIN) / 2) {
	SetValue(val);
	Invoke();
  }
}

void
UKnob::MouseUp(BPoint)
{
  SetTracking(false);
}

void
UKnob::DrawDot(BPoint where)
{
  fBufferView->AddLine(where, where, CYAN);
  ++where.x;
  fBufferView->AddLine(where, where, BLUE);
  --where.x;
  ++where.y;
  fBufferView->AddLine(where, where, BLUE);
  ++where.x;
  fBufferView->AddLine(where, where, BLACK);
}

void
UKnob::Draw(BRect)
{
  fImageBuffer->Lock();

  fBufferView->SetHighColor(GRAY);
  fBufferView->FillRect(fRect);

  // Draw knob bitmap
  BRect srcRect = fClipRect;
  srcRect.OffsetBy(0, -DOT_DROP);
  fBufferView->DrawBitmapAsync(fBitmap, srcRect, fClipRect);

  // Compute and draw notch
  float percent = (float) (Value() - KNOB_MIN) / (float) (KNOB_MAX - KNOB_MIN);
  int32 whichPt = (int32) (percent * (NUM_POINTS - 1));

  fBufferView->SetHighColor(fNotchColor);
  fBufferView->FillEllipse(knobNotchPts[whichPt] + BPoint(0, DOT_DROP),
						   NOTCH_RADIUS, NOTCH_RADIUS);
  fBufferView->SetHighColor(BLACK);
  fBufferView->StrokeEllipse(knobNotchPts[whichPt] + BPoint(0, DOT_DROP),
							 NOTCH_RADIUS, NOTCH_RADIUS);

  fBufferView->BeginLineArray(16);
  DrawDot(MIN_DOT);
  DrawDot(CENTER_DOT);
  DrawDot(MAX_DOT);
  fBufferView->EndLineArray();

  fBufferView->Sync();
  DrawBitmapAsync(fImageBuffer, B_ORIGIN);

  fImageBuffer->Unlock();
}
