/* idct.c, inverse fast discrete cosine transform                           */

/* Copyright (C) 1996, MPEG Software Simulation Group. All Rights Reserved. */

/*
 * Disclaimer of Warranty
 *
 * These software programs are available to the user without any license fee or
 * royalty on an "as is" basis.  The MPEG Software Simulation Group disclaims
 * any and all warranties, whether express, implied, or statuary, including any
 * implied warranties or merchantability or of fitness for a particular
 * purpose.  In no event shall the copyright-holder be liable for any
 * incidental, punitive, or consequential damages of any kind whatsoever
 * arising from the use of these programs.
 *
 * This disclaimer of warranty extends to the user of these programs and user's
 * customers, employees, agents, transferees, successors, and assigns.
 *
 * The MPEG Software Simulation Group does not represent or warrant that the
 * programs furnished hereunder are free of infringement of any third-party
 * patents.
 *
 * Commercial implementations of MPEG-1 and MPEG-2 video, including shareware,
 * are subject to royalty fees to patent holders.  Many of these patents are
 * general enough such that they are unavoidable regardless of implementation
 * design.
 *
 */

/**********************************************************/
/* inverse two dimensional DCT, Chen-Wang algorithm       */
/* (cf. IEEE ASSP-32, pp. 803-816, Aug. 1984)             */
/* 32-bit integer arithmetic (8 bit coefficients)         */
/* 11 mults, 29 adds per DCT                              */
/*                                      sE, 18.8.91       */
/**********************************************************/
/* coefficients extended to 12 bit for IEEE1180-1990      */
/* compliance                           sE,  2.1.94       */
/**********************************************************/

/* this code assumes >> to be a two's-complement arithmetic */
/* right shift: (-2)>>1 == -1 , (-3)>>1 == -2               */
#include <stdio.h>
#include <malloc.h>

#define W1 2841 /* 2048*sqrt(2)*cos(1*pi/16) */
#define W2 2676 /* 2048*sqrt(2)*cos(2*pi/16) */
#define W3 2408 /* 2048*sqrt(2)*cos(3*pi/16) */
#define W5 1609 /* 2048*sqrt(2)*cos(5*pi/16) */
#define W6 1108 /* 2048*sqrt(2)*cos(6*pi/16) */
#define W7 565  /* 2048*sqrt(2)*cos(7*pi/16) */

/* global declarations */
int Fast_IDCT(short *block);

/* private data */

static short iclp_data[1024]=
{
-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,
-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,
-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,
-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,
-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,
-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,
-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,
-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,
-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,
-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,
-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,
-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,
-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,
-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,
-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,
-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,-256,
-256,-255,-254,-253,-252,-251,-250,-249,-248,-247,-246,-245,-244,-243,-242,-241,
-240,-239,-238,-237,-236,-235,-234,-233,-232,-231,-230,-229,-228,-227,-226,-225,
-224,-223,-222,-221,-220,-219,-218,-217,-216,-215,-214,-213,-212,-211,-210,-209,
-208,-207,-206,-205,-204,-203,-202,-201,-200,-199,-198,-197,-196,-195,-194,-193,
-192,-191,-190,-189,-188,-187,-186,-185,-184,-183,-182,-181,-180,-179,-178,-177,
-176,-175,-174,-173,-172,-171,-170,-169,-168,-167,-166,-165,-164,-163,-162,-161,
-160,-159,-158,-157,-156,-155,-154,-153,-152,-151,-150,-149,-148,-147,-146,-145,
-144,-143,-142,-141,-140,-139,-138,-137,-136,-135,-134,-133,-132,-131,-130,-129,
-128,-127,-126,-125,-124,-123,-122,-121,-120,-119,-118,-117,-116,-115,-114,-113,
-112,-111,-110,-109,-108,-107,-106,-105,-104,-103,-102,-101,-100,-99,-98,-97,-96
,-95,-94,-93,-92,-91,-90,-89,-88,-87,-86,-85,-84,-83,-82,-81,-80,-79,-78,-77,-76
,-75,-74,-73,-72,-71,-70,-69,-68,-67,-66,-65,-64,-63,-62,-61,-60,-59,-58,-57,-56
,-55,-54,-53,-52,-51,-50,-49,-48,-47,-46,-45,-44,-43,-42,-41,-40,-39,-38,-37,-36
,-35,-34,-33,-32,-31,-30,-29,-28,-27,-26,-25,-24,-23,-22,-21,-20,-19,-18,-17,-16
,-15,-14,-13,-12,-11,-10, -9, -8, -7, -6, -5, -4, -3, -2, -1,  0,  1,  2,  3,  4
,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24
, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64
, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84
, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,100,101,102,103,104
,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124
,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144
,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164
,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184
,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204
,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224
,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244
,245,246,247,248,249,250,251,252,253,254,255,255,255,255,255,255,255,255,255,255
,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255
,255,255,255,255,255,255,255,
};
static short *iclp=iclp_data+512;

/* row (horizontal) IDCT
 *
 *           7                       pi         1
 * dst[k] = sum c[l] * src[l] * cos( -- * ( k + - ) * l )
 *          l=0                      8          2
 *
 * where: c[0]    = 128
 *        c[1..7] = 128*sqrt(2)
 */

// Do NOT inline these static functions
static int idctrow(short *blk)
{
	int x0, x1, x2, x3, x4, x5, x6, x7, x8;
	
	/* shortcut */
	if (!((x1 = blk[4]<<11) | (x2 = blk[6]) | (x3 = blk[2]) |
		(x4 = blk[1]) | (x5 = blk[7]) | (x6 = blk[5]) | (x7 = blk[3])))
	{
		blk[0]=blk[1]=blk[2]=blk[3]=
		blk[4]=blk[5]=blk[6]=blk[7]=
		blk[0]<<3;
		return blk[0];
	}

	x0 = (blk[0]<<11) + 128; /* for proper rounding in the fourth stage */
	
	/* first stage */
	
	if ((x1|x2|x3|x5|x6|x7) == 0)
	{
		x5 = W7 * x4;
		x4 = x4 * W1;
		
		x8 = x0;
		x6 = x5 + x5;
		
		x2 = (181 * x4 + 128)>>8;
		
		
		blk[0] = (x8 + x4)>>8;
		blk[2] = blk[1] = (x0 + x2)>>8;
		blk[3] = (x8 + x6)>>8;
		blk[4] = (x8 - x6)>>8;
		blk[6] = blk[5] = (x0 - x2)>>8;
		blk[7] = (x8 - x4)>>8;
		return 1;
	}
	
	x8 = W7 * (x4+x5);
	x4 = x8 + (W1-W7) * x4;
	x5 = x8 - (W1+W7) * x5;
	x8 = W3 * (x6+x7);
	x6 = x8 - (W3-W5) * x6;
	x7 = x8 - (W3+W5) * x7;
	
	/* second stage */
	x8 = x0 + x1;
	x0 -= x1;
	x1 = W6 * (x3+x2);
	x2 = x1 - (W2+W6) * x2;
	x3 = x1 + (W2-W6) * x3;
	x1 = x4 + x6;
	x4 -= x6;
	x6 = x5 + x7;
	x5 -= x7;
	
	/* third stage */
	x7 = x8 + x3;
	x8 -= x3;
	x3 = x0 + x2;
	x0 -= x2;
	x2 = (181 * (x4 + x5) + 128)>>8;
	x4 = (181 * (x4 - x5) + 128)>>8;
	
	/* fourth stage */
	blk[0] = (x7 + x1)>>8;
	blk[1] = (x3 + x2)>>8;
	blk[2] = (x0 + x4)>>8;
	blk[3] = (x8 + x6)>>8;
	blk[4] = (x8 - x6)>>8;
	blk[5] = (x0 - x4)>>8;
	blk[6] = (x3 - x2)>>8;
	blk[7] = (x7 - x1)>>8;
	return 1;
}

/* column (vertical) IDCT
 *
 *             7                         pi         1
 * dst[8*k] = sum c[l] * src[8*l] * cos( -- * ( k + - ) * l )
 *            l=0                        8          2
 *
 * where: c[0]    = 1/1024
 *        c[1..7] = (1/1024)*sqrt(2)
 */

static void idctcol(short *blk)
{
	int x0, x1, x2, x3, x4, x5, x6, x7, x8;
	
	/* shortcut */
	if (!((x1=(blk[8*4]<<8))|(x2=blk[8*6])|(x3=blk[8*2])|
		(x4=blk[8*1])|(x5=blk[8*7])|(x6=blk[8*5])|
		(x7=blk[8*3])))
	{
		blk[8*0]=blk[8*1]=blk[8*2]=blk[8*3]=
		blk[8*4]=blk[8*5]=blk[8*6]=blk[8*7]= 
		iclp[(blk[8*0]+32)>>6];
		return;
	}
	
	x0 = (blk[8*0]<<8) + 8192;
	
	if((x1|x2|x3|x5|x6|x7) == 0)
	{
		x8 = W7 * (x4) + 4;
		x4 = (x8 + (W1-W7) * x4) >> 3;
		x5 = (x8) >> 3;
		
		x1 = x4;
		
		x2 = (181*(x4+x5)+128)>>8;
		x4 = (181*(x4-x5)+128)>>8;
		
		
		blk[8*0] = (x0+x1)>>14;
		blk[8*1] = (x0+x2)>>14;
		blk[8*2] = (x0+x4)>>14;
		blk[8*3] = (x0+x5)>>14;
		blk[8*4] = (x0-x5)>>14;
		blk[8*5] = (x0-x4)>>14;
		blk[8*6] = (x0-x2)>>14;
		blk[8*7] = (x0-x1)>>14;
		return;
	}

	/* first stage */
	x8 = W7 * (x4 + x5) + 4;
	x4 = (x8 + (W1-W7) * x4) >> 3;
	x5 = (x8 - (W1 + W7) * x5) >> 3;
	x8 = W3 * (x6 + x7) + 4;
	x6 = (x8 - (W3 - W5) * x6) >> 3;
	x7 = (x8 - (W3 + W5) * x7) >> 3;
	
	/* second stage */
	x8 = x0 + x1;
	x0 -= x1;
	x1 = W6*(x3+x2) + 4;
	x2 = (x1-(W2+W6)*x2) >> 3;
	x3 = (x1+(W2-W6)*x3) >> 3;
	x1 = x4 + x6;
	x4 -= x6;
	x6 = x5 + x7;
	x5 -= x7;
	
	/* third stage */
	x7 = x8 + x3;
	x8 -= x3;
	x3 = x0 + x2;
	x0 -= x2;
	x2 = (181*(x4+x5)+128)>>8;
	x4 = (181*(x4-x5)+128)>>8;
	
	/* fourth stage */
	
	blk[8*0] = iclp[(x7+x1)>>14];
	blk[8*1] = iclp[(x3+x2)>>14];
	blk[8*2] = iclp[(x0+x4)>>14];
	blk[8*3] = iclp[(x8+x6)>>14];
	blk[8*4] = iclp[(x8-x6)>>14];
	blk[8*5] = iclp[(x0-x4)>>14];
	blk[8*6] = iclp[(x3-x2)>>14];
	blk[8*7] = iclp[(x7-x1)>>14];
}

/* two dimensional inverse discrete cosine transform */
// returns 0 if the block was all zeros...
int Fast_IDCT(short *block)
{
	int i;
	int j=0;
	int k=0;
	j=0;
	for (i=0; i<8; i++)
		j|=idctrow(block+8*i);
	if (j==0) return 0;

	for (i=0; i<8; i++)
		idctcol(block+i);
	return 1;
}
