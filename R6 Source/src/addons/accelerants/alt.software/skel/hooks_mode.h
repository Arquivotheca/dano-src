//////////////////////////////////////////////////////////////////////////////
// Set Video Modes - Generic Functions
//    This file contains prototypes for the subset of routines dealing with
// mode setting and mode manipulation that aren't hardware-specific.
//
//////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////
// Function Prototypes
//////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////
// Set Indexed Colors
//    Sets the palette table at 8 bpp. Does nothing at other colour depths.
void SetIndexedColors(uint count,
                      uint8 first,
                      uint8 *color_data,
                      uint32 flags);

//////////////////////////////////////////////////////////////////////////////
// Accelerant Mode Count
//    Return the number of 'built-in' display modes.
uint32 AccelerantModeCount(void);

//////////////////////////////////////////////////////////////////////////////
// Get a Mode List
//    Copy the list of predefined modes to the buffer pointed at by *dm.
status_t GetModeList(display_mode *dm);

//////////////////////////////////////////////////////////////////////////////
// Create the Mode List
//    Create a list of predefined modes. Called once after initialization.
void create_mode_list(void);

//////////////////////////////////////////////////////////////////////////////
// Set the Video Mode
status_t SetVideoMode(display_mode *dm);

//////////////////////////////////////////////////////////////////////////////
// Get Video Mode
status_t GetVideoMode(display_mode *dm);

//////////////////////////////////////////////////////////////////////////////
// Get Framebuffer Configuration
status_t GetFramebufferConfig(frame_buffer_config *fbc);

//////////////////////////////////////////////////////////////////////////////
// Get the Pixel Clock Limits
status_t GetPixelClockLimits(display_mode *dm,
                             uint32 *low,
                             uint32 *high);

//////////////////////////////////////////////////////////////////////////////
// This Is The End Of The File ///////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
