/*--------------------------------------------------------------------*\
  File:      intel.h
  Creator:   Robert Polic, Matt Bogosian <mattb@be.com>
  Copyright: (c)1997, 1998, Be, Inc. All rights reserved.
  Description: Header file for intel.cpp (even though it's
      unnecessary, but hey, WTF?). Original version by Robert Polic
      ('cause I wouldn't do this).
\*--------------------------------------------------------------------*/

#ifndef INTEL_H
#define INTEL_H

#include <drive_setup.h>
#include <intel_map.h>

#include <Alert.h>
#include <Bitmap.h>
#include <Box.h>
#include <Button.h>
#include <CheckBox.h>
#include <Drivers.h>
#include <Font.h>
#include <List.h>
#include <Menu.h>
#include <MenuField.h>
#include <MenuItem.h>
#include <Message.h>
#include <Point.h>
#include <PopUpMenu.h>
#include <RadioButton.h>
#include <Rect.h>
#include <StringView.h>
#include <TextControl.h>
#include <View.h>
#include <Window.h>

#define BLOCK_SIZE			512

#define WIND_WIDTH			340
#define WIND_HEIGHT		380
#define VIEW_COLOR			216

#define BUTTON_WIDTH		 70
#define BUTTON_HEIGHT		 25

#define BUTTON_PARTITION_H	(WIND_WIDTH - 10 - BUTTON_WIDTH)
#define BUTTON_PARTITION_V	(WIND_HEIGHT - 10 - BUTTON_HEIGHT)
#define BUTTON_PARTITION_TEXT	"OK"

#define BUTTON_CANCEL_H		(BUTTON_PARTITION_H - 10 - BUTTON_WIDTH)
#define BUTTON_CANCEL_V		BUTTON_PARTITION_V
#define BUTTON_CANCEL_TEXT	"Cancel"

#define BUTTON_REVERT_H		(BUTTON_CANCEL_H - 10 - BUTTON_WIDTH)
#define BUTTON_REVERT_V		BUTTON_CANCEL_V
#define BUTTON_REVERT_TEXT	"Revert"

#define LABEL_H				 10
#define LABEL_V				  6
#define LABEL_WIDTH			(WIND_WIDTH - (2 * LABEL_H))
#define LABEL_TEXT			"Intel Style Partition Map"

#define H_LINE_H			  5
#define H_LINE_WIDTH		(WIND_WIDTH - (2 * H_LINE_H))

#define LINE1_V				(LABEL_V + 20)

#define LINE2_V				(LINE1_V + 4)
#define LINE2_H				(WIND_WIDTH >> 1)

#define PART_TEXT			"Partition"
#define PART_TYPE_TEXT		"Type"
#define PART_RADIO_TEXT		"Active"

#define PART1_H				LABEL_H
#define PART1_V				(LINE1_V + 6)
#define PART1_WIDTH			(LINE2_H - PART1_H - 4)
#define PART1_TYPE_H		(PART1_H + 10)
#define PART1_TYPE_V		(PART1_V + 16)
#define PART1_TYPE_WIDTH	((PART1_WIDTH - (2 * PART1_TYPE_H)) / 2)
#define PART1_MENU_H		(PART1_TYPE_H + PART1_TYPE_WIDTH + 10)
#define PART1_MENU_V		PART1_TYPE_V
#define PART1_MENU_WIDTH	(PART1_TYPE_WIDTH + 16)
#define PART1_RADIO_H		(PART1_TYPE_H + 30)
#define PART1_RADIO_V		(PART1_TYPE_V + 25)
#define PART1_RADIO_WIDTH	PART1_TYPE_WIDTH

#define PART2_H				(LINE2_H + PART1_H)
#define PART2_V				PART1_V
#define PART2_WIDTH			PART1_WIDTH
#define PART2_TYPE_H		(PART2_H + 10)
#define PART2_TYPE_V		(PART2_V + 16)
#define PART2_TYPE_WIDTH	PART1_TYPE_WIDTH
#define PART2_MENU_H		(PART2_TYPE_H + PART2_TYPE_WIDTH + 10)
#define PART2_MENU_V		PART2_TYPE_V
#define PART2_MENU_WIDTH	(PART2_TYPE_WIDTH + 16)
#define PART2_RADIO_H		(PART2_TYPE_H + 30)
#define PART2_RADIO_V		(PART2_TYPE_V + 25)
#define PART2_RADIO_WIDTH	PART2_TYPE_WIDTH

#define PART3_H				PART1_H
#define PART3_V				(PART1_V + 70)
#define PART3_WIDTH			PART1_WIDTH
#define PART3_TYPE_H		(PART3_H + 10)
#define PART3_TYPE_V		(PART3_V + 16)
#define PART3_TYPE_WIDTH	PART1_TYPE_WIDTH
#define PART3_MENU_H		(PART3_TYPE_H + PART3_TYPE_WIDTH + 10)
#define PART3_MENU_V		PART3_TYPE_V
#define PART3_MENU_WIDTH	(PART3_TYPE_WIDTH + 16)
#define PART3_RADIO_H		(PART3_TYPE_H + 30)
#define PART3_RADIO_V		(PART3_TYPE_V + 25)
#define PART3_RADIO_WIDTH	PART3_TYPE_WIDTH

#define LINE3_V				(PART1_V + 70 - 6)

#define PART4_H				PART2_H
#define PART4_V				PART3_V
#define PART4_WIDTH			PART3_WIDTH
#define PART4_TYPE_H		(PART4_H + 10)
#define PART4_TYPE_V		(PART4_V + 16)
#define PART4_TYPE_WIDTH	PART1_TYPE_WIDTH
#define PART4_MENU_H		(PART4_TYPE_H + PART4_TYPE_WIDTH + 10)
#define PART4_MENU_V		PART4_TYPE_V
#define PART4_MENU_WIDTH	(PART4_TYPE_WIDTH + 16)
#define PART4_RADIO_H		(PART4_TYPE_H + 30)
#define PART4_RADIO_V		(PART4_TYPE_V + 25)
#define PART4_RADIO_WIDTH	PART4_TYPE_WIDTH

#define LINE2_HEIGHT		(PART4_V + 70 - PART1_V - 7)

#define LINE4_V				(PART3_V + 70 - 6)

#define SLIDER_H			 10
#define SLIDER_V			(LINE4_V + 10)
#define SLIDER_WIDTH		(WIND_WIDTH - (2 * SLIDER_H))
#define SLIDER_HEIGHT		(BUTTON_PARTITION_V - 10 - SLIDER_V)

enum MESSAGES				{M_OK = 128, M_CANCEL, M_REVERT, M_RADIO, M_TEXT,
							 M_MENU, M_SLIDER, M_LAYOUT};

static uint32 swap16(uchar[2]);
static uint32 swap32(uchar[4]);
class TPartView;


//====================================================================

class IntelPartWindow : public BWindow {

private:

bool			fReadOnly;
int32			fBlockSize;
int32			fDevice;
uint64			fSize;
uint64			fSectors;
uint64			fOffset;
BButton			*fRevert;
BMessage		*fMessage;
BPopUpMenu		*fMenu[4];
BCheckBox		*fActive[4];
BTextControl	*fType[4];
TPartView		*fPartView;
bootsector		fSB;

public:

				IntelPartWindow(BRect, BMessage*);
virtual void	MessageReceived(BMessage*);
void			AdjustMenu(BMenu*, int32);
void			AddPartItem(short, BView*, BRect, BRect, BRect, BRect);
};


//====================================================================

class IntelBox : public BBox {

private:

public:
				IntelBox(BRect);
virtual void	Draw(BRect);
};


//====================================================================

static uchar intel_part_map[] =	{
	0x31, 0xc0, 0x8e, 0xd0, 0xbc, 0x00, 0x7c, 0xfc, 
	0x50, 0x1f, 0x1e, 0x07, 0x89, 0xe6, 0xbf, 0x00, 
	0x7e, 0xb9, 0x00, 0x01, 0xfc, 0xf3, 0xa5, 0xe9, 
	0x00, 0x02, 0xbe, 0xbe, 0x7f, 0xb9, 0x04, 0x00, 
	0x8a, 0x14, 0xf6, 0xc2, 0x80, 0x75, 0x0a, 0x83, 
	0xc6, 0x10, 0xe2, 0xf4, 0xbe, 0xce, 0x7e, 0xeb, 
	0x60, 0x66, 0x8b, 0x44, 0x08, 0xbb, 0x00, 0x7c, 
	0x06, 0x53, 0x66, 0x89, 0x87, 0xc6, 0x02, 0x06, 
	0x53, 0x52, 0x66, 0x50, 0xb4, 0x08, 0xcd, 0x13, 
	0x86, 0xcd, 0x89, 0xcd, 0x81, 0xe5, 0xff, 0x03, 
	0x86, 0xcd, 0x88, 0xc8, 0x25, 0x3f, 0x00, 0x89, 
	0xc3, 0xb2, 0x00, 0x86, 0xd6, 0x42, 0xf7, 0xe2, 
	0x91, 0x58, 0x5a, 0xe3, 0x2c, 0x39, 0xca, 0x73, 
	0x3b, 0xf7, 0xf1, 0x39, 0xe8, 0x73, 0x35, 0x91, 
	0x92, 0xf6, 0xf3, 0x86, 0xcd, 0xc0, 0xc9, 0x02, 
	0x08, 0xe1, 0x41, 0x5a, 0x88, 0xc6, 0x5b, 0x07, 
	0xbf, 0x05, 0x00, 0xb8, 0x01, 0x02, 0xcd, 0x13, 
	0x73, 0x26, 0x31, 0xc0, 0xcd, 0x13, 0x4f, 0x75, 
	0xf2, 0xbe, 0xf5, 0x7e, 0x31, 0xdb, 0xb4, 0x0e, 
	0xac, 0xcd, 0x10, 0x3c, 0x2e, 0x75, 0xf9, 0x93, 
	0xcd, 0x16, 0xcd, 0x19, 0x5a, 0x58, 0x58, 0xb4, 
	0x42, 0xbe, 0xbe, 0x7e, 0xcd, 0x13, 0x72, 0xe1, 
	0x8b, 0x1e, 0xfe, 0x7d, 0xbe, 0x19, 0x7f, 0x81, 
	0xfb, 0x55, 0xaa, 0x75, 0xd4, 0xcb, 0x10, 0x00, 
	0x01, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4e, 0x6f, 
	0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 
	0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 
	0x6e, 0x73, 0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 
	0x20, 0x6f, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 
	0x64, 0x69, 0x73, 0x6b, 0x2e, 0x44, 0x69, 0x73, 
	0x6b, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x20, 
	0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x20, 
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x70, 
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 
	0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x20, 0x6c, 0x6f, 
	0x61, 0x64, 0x65, 0x72, 0x20, 0x6e, 0x6f, 0x74, 
	0x20, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x6f, 
	0x6e, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 
	0x20, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 
	0x6f, 0x6e, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0xaa
};

#endif
